
Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037e0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08003968  08003968  00004968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a80  08003a80  00005018  2**0
                  CONTENTS
  4 .ARM          00000008  08003a80  08003a80  00004a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a88  08003a88  00005018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a88  08003a88  00004a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a8c  08003a8c  00004a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08003a90  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005018  2**0
                  CONTENTS
 10 .bss          00000770  20000018  20000018  00005018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000788  20000788  00005018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c9f1  00000000  00000000  00005048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021a6  00000000  00000000  00011a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd0  00000000  00000000  00013be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009dc  00000000  00000000  000148b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022e6a  00000000  00000000  0001528c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fddd  00000000  00000000  000380f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8590  00000000  00000000  00047ed3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00120463  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000351c  00000000  00000000  001204a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000034  00000000  00000000  001239c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003950 	.word	0x08003950

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08003950 	.word	0x08003950

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <HAL_ADC_ConvHalfCpltCallback>:
 *         1. Converts ADC samples to float
 *         2. Modulates with carrier wave
 *         3. Applies IIR filter
 *         4. Outputs to DAC with DC offset
 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	uint32_t sineIndex=0;
 80004c0:	2300      	movs	r3, #0
 80004c2:	617b      	str	r3, [r7, #20]
	for(uint32_t i=0;i<ADC_BUFFER_SIZE/2;i++){
 80004c4:	2300      	movs	r3, #0
 80004c6:	613b      	str	r3, [r7, #16]
 80004c8:	e029      	b.n	800051e <HAL_ADC_ConvHalfCpltCallback+0x66>
		adcValue[i]=(float32_t)(adcBuffer[i]);
 80004ca:	4a2b      	ldr	r2, [pc, #172]	@ (8000578 <HAL_ADC_ConvHalfCpltCallback+0xc0>)
 80004cc:	693b      	ldr	r3, [r7, #16]
 80004ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004d2:	ee07 3a90 	vmov	s15, r3
 80004d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80004da:	4a28      	ldr	r2, [pc, #160]	@ (800057c <HAL_ADC_ConvHalfCpltCallback+0xc4>)
 80004dc:	693b      	ldr	r3, [r7, #16]
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	4413      	add	r3, r2
 80004e2:	edc3 7a00 	vstr	s15, [r3]
		modulatedSingal[i]=adcValue[i]*sineTable[sineIndex];
 80004e6:	4a25      	ldr	r2, [pc, #148]	@ (800057c <HAL_ADC_ConvHalfCpltCallback+0xc4>)
 80004e8:	693b      	ldr	r3, [r7, #16]
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	4413      	add	r3, r2
 80004ee:	ed93 7a00 	vldr	s14, [r3]
 80004f2:	4a23      	ldr	r2, [pc, #140]	@ (8000580 <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	009b      	lsls	r3, r3, #2
 80004f8:	4413      	add	r3, r2
 80004fa:	edd3 7a00 	vldr	s15, [r3]
 80004fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000502:	4a20      	ldr	r2, [pc, #128]	@ (8000584 <HAL_ADC_ConvHalfCpltCallback+0xcc>)
 8000504:	693b      	ldr	r3, [r7, #16]
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	4413      	add	r3, r2
 800050a:	edc3 7a00 	vstr	s15, [r3]
		sineIndex=(sineIndex+1)%SINE_TABLE_SIZE;
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	3301      	adds	r3, #1
 8000512:	f003 0307 	and.w	r3, r3, #7
 8000516:	617b      	str	r3, [r7, #20]
	for(uint32_t i=0;i<ADC_BUFFER_SIZE/2;i++){
 8000518:	693b      	ldr	r3, [r7, #16]
 800051a:	3301      	adds	r3, #1
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	693b      	ldr	r3, [r7, #16]
 8000520:	2b1f      	cmp	r3, #31
 8000522:	d9d2      	bls.n	80004ca <HAL_ADC_ConvHalfCpltCallback+0x12>
	}
	//arm_fir_f32(&fir_filter_BPF, modulatedSignalPtr+BLOCK_SIZE,filt_out_BPF_ptr+BLOCK_SIZE , BLOCK_SIZE);
	arm_biquad_cascade_df2T_f32(&iir_filter_BPF, modulatedSignalPtr, filt_out_BPF_ptr, BLOCK_SIZE);
 8000524:	4b18      	ldr	r3, [pc, #96]	@ (8000588 <HAL_ADC_ConvHalfCpltCallback+0xd0>)
 8000526:	6819      	ldr	r1, [r3, #0]
 8000528:	4b18      	ldr	r3, [pc, #96]	@ (800058c <HAL_ADC_ConvHalfCpltCallback+0xd4>)
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	2320      	movs	r3, #32
 800052e:	4818      	ldr	r0, [pc, #96]	@ (8000590 <HAL_ADC_ConvHalfCpltCallback+0xd8>)
 8000530:	f000 fcdb 	bl	8000eea <arm_biquad_cascade_df2T_f32>

	for(int i=0;i<DAC_BUFFER_SIZE/2;i++){
 8000534:	2300      	movs	r3, #0
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	e016      	b.n	8000568 <HAL_ADC_ConvHalfCpltCallback+0xb0>
		dacBuffer[i]=(uint32_t)(filt_out_BPF[i]+dc);
 800053a:	4a16      	ldr	r2, [pc, #88]	@ (8000594 <HAL_ADC_ConvHalfCpltCallback+0xdc>)
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	4413      	add	r3, r2
 8000542:	ed93 7a00 	vldr	s14, [r3]
 8000546:	4b14      	ldr	r3, [pc, #80]	@ (8000598 <HAL_ADC_ConvHalfCpltCallback+0xe0>)
 8000548:	edd3 7a00 	vldr	s15, [r3]
 800054c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000554:	ee17 3a90 	vmov	r3, s15
 8000558:	b299      	uxth	r1, r3
 800055a:	4a10      	ldr	r2, [pc, #64]	@ (800059c <HAL_ADC_ConvHalfCpltCallback+0xe4>)
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0;i<DAC_BUFFER_SIZE/2;i++){
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	3301      	adds	r3, #1
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	2b1f      	cmp	r3, #31
 800056c:	dde5      	ble.n	800053a <HAL_ADC_ConvHalfCpltCallback+0x82>
	}
}
 800056e:	bf00      	nop
 8000570:	bf00      	nop
 8000572:	3718      	adds	r7, #24
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20000198 	.word	0x20000198
 800057c:	200002b8 	.word	0x200002b8
 8000580:	20000298 	.word	0x20000298
 8000584:	200003b8 	.word	0x200003b8
 8000588:	20000000 	.word	0x20000000
 800058c:	20000004 	.word	0x20000004
 8000590:	200005b8 	.word	0x200005b8
 8000594:	200004b8 	.word	0x200004b8
 8000598:	20000008 	.word	0x20000008
 800059c:	20000218 	.word	0x20000218

080005a0 <HAL_ADC_ConvCpltCallback>:
/**
 * @brief  Callback function for ADC conversion complete
 * @param  hadc: ADC handle pointer
 * @note   Processes second half of ADC buffer while DMA fills first half
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	uint32_t sineIndex=0;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
	for(uint32_t i=ADC_BUFFER_SIZE/2;i<ADC_BUFFER_SIZE;i++){
 80005ac:	2320      	movs	r3, #32
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	e029      	b.n	8000606 <HAL_ADC_ConvCpltCallback+0x66>
		adcValue[i]=(float32_t)(adcBuffer[i]);
 80005b2:	4a2d      	ldr	r2, [pc, #180]	@ (8000668 <HAL_ADC_ConvCpltCallback+0xc8>)
 80005b4:	693b      	ldr	r3, [r7, #16]
 80005b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005ba:	ee07 3a90 	vmov	s15, r3
 80005be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005c2:	4a2a      	ldr	r2, [pc, #168]	@ (800066c <HAL_ADC_ConvCpltCallback+0xcc>)
 80005c4:	693b      	ldr	r3, [r7, #16]
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	4413      	add	r3, r2
 80005ca:	edc3 7a00 	vstr	s15, [r3]
		modulatedSingal[i]=adcValue[i]*sineTable[sineIndex];
 80005ce:	4a27      	ldr	r2, [pc, #156]	@ (800066c <HAL_ADC_ConvCpltCallback+0xcc>)
 80005d0:	693b      	ldr	r3, [r7, #16]
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	4413      	add	r3, r2
 80005d6:	ed93 7a00 	vldr	s14, [r3]
 80005da:	4a25      	ldr	r2, [pc, #148]	@ (8000670 <HAL_ADC_ConvCpltCallback+0xd0>)
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	4413      	add	r3, r2
 80005e2:	edd3 7a00 	vldr	s15, [r3]
 80005e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80005ea:	4a22      	ldr	r2, [pc, #136]	@ (8000674 <HAL_ADC_ConvCpltCallback+0xd4>)
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	4413      	add	r3, r2
 80005f2:	edc3 7a00 	vstr	s15, [r3]
		sineIndex=(sineIndex+1)%SINE_TABLE_SIZE;
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	3301      	adds	r3, #1
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	617b      	str	r3, [r7, #20]
	for(uint32_t i=ADC_BUFFER_SIZE/2;i<ADC_BUFFER_SIZE;i++){
 8000600:	693b      	ldr	r3, [r7, #16]
 8000602:	3301      	adds	r3, #1
 8000604:	613b      	str	r3, [r7, #16]
 8000606:	693b      	ldr	r3, [r7, #16]
 8000608:	2b3f      	cmp	r3, #63	@ 0x3f
 800060a:	d9d2      	bls.n	80005b2 <HAL_ADC_ConvCpltCallback+0x12>
	}
	//arm_fir_f32(&fir_filter_BPF, modulatedSignalPtr+BLOCK_SIZE,filt_out_BPF_ptr+BLOCK_SIZE , BLOCK_SIZE);
	arm_biquad_cascade_df2T_f32(&iir_filter_BPF, modulatedSignalPtr+BLOCK_SIZE, filt_out_BPF_ptr+BLOCK_SIZE, BLOCK_SIZE);
 800060c:	4b1a      	ldr	r3, [pc, #104]	@ (8000678 <HAL_ADC_ConvCpltCallback+0xd8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 8000614:	4b19      	ldr	r3, [pc, #100]	@ (800067c <HAL_ADC_ConvCpltCallback+0xdc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f103 0280 	add.w	r2, r3, #128	@ 0x80
 800061c:	2320      	movs	r3, #32
 800061e:	4818      	ldr	r0, [pc, #96]	@ (8000680 <HAL_ADC_ConvCpltCallback+0xe0>)
 8000620:	f000 fc63 	bl	8000eea <arm_biquad_cascade_df2T_f32>
	for(int i=DAC_BUFFER_SIZE/2;i<DAC_BUFFER_SIZE;i++){
 8000624:	2320      	movs	r3, #32
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	e016      	b.n	8000658 <HAL_ADC_ConvCpltCallback+0xb8>
		dacBuffer[i]=(uint32_t)(filt_out_BPF[i]+dc);
 800062a:	4a16      	ldr	r2, [pc, #88]	@ (8000684 <HAL_ADC_ConvCpltCallback+0xe4>)
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	4413      	add	r3, r2
 8000632:	ed93 7a00 	vldr	s14, [r3]
 8000636:	4b14      	ldr	r3, [pc, #80]	@ (8000688 <HAL_ADC_ConvCpltCallback+0xe8>)
 8000638:	edd3 7a00 	vldr	s15, [r3]
 800063c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000644:	ee17 3a90 	vmov	r3, s15
 8000648:	b299      	uxth	r1, r3
 800064a:	4a10      	ldr	r2, [pc, #64]	@ (800068c <HAL_ADC_ConvCpltCallback+0xec>)
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=DAC_BUFFER_SIZE/2;i<DAC_BUFFER_SIZE;i++){
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	3301      	adds	r3, #1
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	2b3f      	cmp	r3, #63	@ 0x3f
 800065c:	dde5      	ble.n	800062a <HAL_ADC_ConvCpltCallback+0x8a>
	}
}
 800065e:	bf00      	nop
 8000660:	bf00      	nop
 8000662:	3718      	adds	r7, #24
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000198 	.word	0x20000198
 800066c:	200002b8 	.word	0x200002b8
 8000670:	20000298 	.word	0x20000298
 8000674:	200003b8 	.word	0x200003b8
 8000678:	20000000 	.word	0x20000000
 800067c:	20000004 	.word	0x20000004
 8000680:	200005b8 	.word	0x200005b8
 8000684:	200004b8 	.word	0x200004b8
 8000688:	20000008 	.word	0x20000008
 800068c:	20000218 	.word	0x20000218

08000690 <GenerateSineWave>:

/**
 * @brief  Generates sine wave lookup table for carrier signal
 * @note   Creates one complete cycle of sine wave with SINE_TABLE_SIZE points
 */
void GenerateSineWave(void){
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
	for(int i=0; i<SINE_TABLE_SIZE;i++){
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	e008      	b.n	80006ae <GenerateSineWave+0x1e>
//		sineTable[i]=arm_sin_q15(2.0f*PI*i/SINE_TABLE_SIZE);
		sineTable[i] = 3.4028235e+38;
 800069c:	4a09      	ldr	r2, [pc, #36]	@ (80006c4 <GenerateSineWave+0x34>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	4413      	add	r3, r2
 80006a4:	4a08      	ldr	r2, [pc, #32]	@ (80006c8 <GenerateSineWave+0x38>)
 80006a6:	601a      	str	r2, [r3, #0]
	for(int i=0; i<SINE_TABLE_SIZE;i++){
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	3301      	adds	r3, #1
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2b07      	cmp	r3, #7
 80006b2:	ddf3      	ble.n	800069c <GenerateSineWave+0xc>
	}
}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	20000298 	.word	0x20000298
 80006c8:	7f7fffff 	.word	0x7f7fffff

080006cc <InitializeIIRFilter>:
 * @note   Converts filter coefficients to biquad cascade form
 *         Each biquad section requires 5 coefficients: b0, b1, b2, a1, a2
 *         The filter is implemented as a cascade of second-order sections
 *         Direct Form II Transposed structure is used for better numerical stability
 */
void InitializeIIRFilter(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0
    // Convert coefficients to biquad cascade form
     for(int i = 0; i < NUM_STAGE_IIR; i++) {
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
 80006d6:	e05a      	b.n	800078e <InitializeIIRFilter+0xc2>
        // Get coefficients for this biquad section
        float32_t b0 = b_coeffs[i*2];
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	005b      	lsls	r3, r3, #1
 80006dc:	4a32      	ldr	r2, [pc, #200]	@ (80007a8 <InitializeIIRFilter+0xdc>)
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	4413      	add	r3, r2
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	613b      	str	r3, [r7, #16]
        float32_t b1 = b_coeffs[i*2 + 1];
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	3301      	adds	r3, #1
 80006ec:	4a2e      	ldr	r2, [pc, #184]	@ (80007a8 <InitializeIIRFilter+0xdc>)
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	4413      	add	r3, r2
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	60fb      	str	r3, [r7, #12]
        float32_t b2 = b_coeffs[i*2 + 2];
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	3301      	adds	r3, #1
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	4a2a      	ldr	r2, [pc, #168]	@ (80007a8 <InitializeIIRFilter+0xdc>)
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	4413      	add	r3, r2
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	60bb      	str	r3, [r7, #8]
        float32_t a1 = a_coeffs[i*2 + 1];
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	3301      	adds	r3, #1
 800070c:	4a27      	ldr	r2, [pc, #156]	@ (80007ac <InitializeIIRFilter+0xe0>)
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	4413      	add	r3, r2
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	607b      	str	r3, [r7, #4]
        float32_t a2 = a_coeffs[i*2 + 2];
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	3301      	adds	r3, #1
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	4a23      	ldr	r2, [pc, #140]	@ (80007ac <InitializeIIRFilter+0xe0>)
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	4413      	add	r3, r2
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	603b      	str	r3, [r7, #0]
        
        // Normalize coefficients by a0 (which is 1)
        iir_coeffs[i*5] = b0;      // b0
 8000726:	697a      	ldr	r2, [r7, #20]
 8000728:	4613      	mov	r3, r2
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	4413      	add	r3, r2
 800072e:	4a20      	ldr	r2, [pc, #128]	@ (80007b0 <InitializeIIRFilter+0xe4>)
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	4413      	add	r3, r2
 8000734:	693a      	ldr	r2, [r7, #16]
 8000736:	601a      	str	r2, [r3, #0]
        iir_coeffs[i*5 + 1] = b1;  // b1
 8000738:	697a      	ldr	r2, [r7, #20]
 800073a:	4613      	mov	r3, r2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	4413      	add	r3, r2
 8000740:	3301      	adds	r3, #1
 8000742:	4a1b      	ldr	r2, [pc, #108]	@ (80007b0 <InitializeIIRFilter+0xe4>)
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	4413      	add	r3, r2
 8000748:	68fa      	ldr	r2, [r7, #12]
 800074a:	601a      	str	r2, [r3, #0]
        iir_coeffs[i*5 + 2] = b2;  // b2
 800074c:	697a      	ldr	r2, [r7, #20]
 800074e:	4613      	mov	r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4413      	add	r3, r2
 8000754:	3302      	adds	r3, #2
 8000756:	4a16      	ldr	r2, [pc, #88]	@ (80007b0 <InitializeIIRFilter+0xe4>)
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	4413      	add	r3, r2
 800075c:	68ba      	ldr	r2, [r7, #8]
 800075e:	601a      	str	r2, [r3, #0]
        iir_coeffs[i*5 + 3] = a1; // -a1 (negative for Direct Form II Transposed)
 8000760:	697a      	ldr	r2, [r7, #20]
 8000762:	4613      	mov	r3, r2
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	4413      	add	r3, r2
 8000768:	3303      	adds	r3, #3
 800076a:	4a11      	ldr	r2, [pc, #68]	@ (80007b0 <InitializeIIRFilter+0xe4>)
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	4413      	add	r3, r2
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	601a      	str	r2, [r3, #0]
        iir_coeffs[i*5 + 4] = a2; // -a2 (negative for Direct Form II Transposed)
 8000774:	697a      	ldr	r2, [r7, #20]
 8000776:	4613      	mov	r3, r2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	4413      	add	r3, r2
 800077c:	3304      	adds	r3, #4
 800077e:	4a0c      	ldr	r2, [pc, #48]	@ (80007b0 <InitializeIIRFilter+0xe4>)
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	4413      	add	r3, r2
 8000784:	683a      	ldr	r2, [r7, #0]
 8000786:	601a      	str	r2, [r3, #0]
     for(int i = 0; i < NUM_STAGE_IIR; i++) {
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	3301      	adds	r3, #1
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	2b0f      	cmp	r3, #15
 8000792:	dda1      	ble.n	80006d8 <InitializeIIRFilter+0xc>
    }
    
    // Initialize the IIR filter structure
    arm_biquad_cascade_df2T_init_f32(&iir_filter_BPF, NUM_STAGE_IIR, &iir_coeffs[0], &iir_State_BPF[0]);
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <InitializeIIRFilter+0xe8>)
 8000796:	4a06      	ldr	r2, [pc, #24]	@ (80007b0 <InitializeIIRFilter+0xe4>)
 8000798:	2110      	movs	r1, #16
 800079a:	4807      	ldr	r0, [pc, #28]	@ (80007b8 <InitializeIIRFilter+0xec>)
 800079c:	f000 fc3b 	bl	8001016 <arm_biquad_cascade_df2T_init_f32>
}
 80007a0:	bf00      	nop
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	080039e8 	.word	0x080039e8
 80007ac:	08003968 	.word	0x08003968
 80007b0:	20000644 	.word	0x20000644
 80007b4:	200005c4 	.word	0x200005c4
 80007b8:	200005b8 	.word	0x200005b8

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c0:	f000 fc46 	bl	8001050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c4:	f000 f82a 	bl	800081c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c8:	f000 f994 	bl	8000af4 <MX_GPIO_Init>
  MX_DMA_Init();
 80007cc:	f000 f95c 	bl	8000a88 <MX_DMA_Init>
  MX_DAC_Init();
 80007d0:	f000 f8e0 	bl	8000994 <MX_DAC_Init>
  MX_ADC1_Init();
 80007d4:	f000 f88c 	bl	80008f0 <MX_ADC1_Init>
  MX_TIM8_Init();
 80007d8:	f000 f906 	bl	80009e8 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  GenerateSineWave();
 80007dc:	f7ff ff58 	bl	8000690 <GenerateSineWave>
  //arm_fir_init_f32(&fir_filter_BPF, FIR_ORDER, &fir_Coeffs[0], &fir_State_BPF[0], BLOCK_SIZE);
  InitializeIIRFilter();
 80007e0:	f7ff ff74 	bl	80006cc <InitializeIIRFilter>
  HAL_TIM_Base_Start(&htim8);
 80007e4:	4809      	ldr	r0, [pc, #36]	@ (800080c <main+0x50>)
 80007e6:	f002 fd95 	bl	8003314 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcBuffer, ADC_BUFFER_SIZE);
 80007ea:	2240      	movs	r2, #64	@ 0x40
 80007ec:	4908      	ldr	r1, [pc, #32]	@ (8000810 <main+0x54>)
 80007ee:	4809      	ldr	r0, [pc, #36]	@ (8000814 <main+0x58>)
 80007f0:	f000 fdf4 	bl	80013dc <HAL_ADC_Start_DMA>
//  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)(sine_wave), DAC_BUFFER_SIZE, DAC_ALIGN_12B_R);

  /* USER CODE END 2 */
	  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 80007f4:	2100      	movs	r1, #0
 80007f6:	4808      	ldr	r0, [pc, #32]	@ (8000818 <main+0x5c>)
 80007f8:	f001 faf1 	bl	8001dde <HAL_DAC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 4000);
 80007fc:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	4804      	ldr	r0, [pc, #16]	@ (8000818 <main+0x5c>)
 8000806:	f001 fb41 	bl	8001e8c <HAL_DAC_SetValue>
 800080a:	e7f7      	b.n	80007fc <main+0x40>
 800080c:	20000150 	.word	0x20000150
 8000810:	20000198 	.word	0x20000198
 8000814:	20000034 	.word	0x20000034
 8000818:	200000dc 	.word	0x200000dc

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b094      	sub	sp, #80	@ 0x50
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 0320 	add.w	r3, r7, #32
 8000826:	2230      	movs	r2, #48	@ 0x30
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f003 f864 	bl	80038f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	4b28      	ldr	r3, [pc, #160]	@ (80008e8 <SystemClock_Config+0xcc>)
 8000846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000848:	4a27      	ldr	r2, [pc, #156]	@ (80008e8 <SystemClock_Config+0xcc>)
 800084a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800084e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000850:	4b25      	ldr	r3, [pc, #148]	@ (80008e8 <SystemClock_Config+0xcc>)
 8000852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000854:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	4b22      	ldr	r3, [pc, #136]	@ (80008ec <SystemClock_Config+0xd0>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a21      	ldr	r2, [pc, #132]	@ (80008ec <SystemClock_Config+0xd0>)
 8000866:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800086a:	6013      	str	r3, [r2, #0]
 800086c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <SystemClock_Config+0xd0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000878:	2301      	movs	r3, #1
 800087a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800087c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000882:	2302      	movs	r3, #2
 8000884:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000886:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800088a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800088c:	2304      	movs	r3, #4
 800088e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000890:	2360      	movs	r3, #96	@ 0x60
 8000892:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000894:	2302      	movs	r3, #2
 8000896:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000898:	2304      	movs	r3, #4
 800089a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089c:	f107 0320 	add.w	r3, r7, #32
 80008a0:	4618      	mov	r0, r3
 80008a2:	f002 f883 	bl	80029ac <HAL_RCC_OscConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008ac:	f000 f94a 	bl	8000b44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b0:	230f      	movs	r3, #15
 80008b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b4:	2302      	movs	r3, #2
 80008b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008bc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	2103      	movs	r1, #3
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 fae4 	bl	8002e9c <HAL_RCC_ClockConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008da:	f000 f933 	bl	8000b44 <Error_Handler>
  }
}
 80008de:	bf00      	nop
 80008e0:	3750      	adds	r7, #80	@ 0x50
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40007000 	.word	0x40007000

080008f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008f6:	463b      	mov	r3, r7
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000902:	4b21      	ldr	r3, [pc, #132]	@ (8000988 <MX_ADC1_Init+0x98>)
 8000904:	4a21      	ldr	r2, [pc, #132]	@ (800098c <MX_ADC1_Init+0x9c>)
 8000906:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000908:	4b1f      	ldr	r3, [pc, #124]	@ (8000988 <MX_ADC1_Init+0x98>)
 800090a:	2200      	movs	r2, #0
 800090c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800090e:	4b1e      	ldr	r3, [pc, #120]	@ (8000988 <MX_ADC1_Init+0x98>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000914:	4b1c      	ldr	r3, [pc, #112]	@ (8000988 <MX_ADC1_Init+0x98>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800091a:	4b1b      	ldr	r3, [pc, #108]	@ (8000988 <MX_ADC1_Init+0x98>)
 800091c:	2201      	movs	r2, #1
 800091e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000920:	4b19      	ldr	r3, [pc, #100]	@ (8000988 <MX_ADC1_Init+0x98>)
 8000922:	2200      	movs	r2, #0
 8000924:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000928:	4b17      	ldr	r3, [pc, #92]	@ (8000988 <MX_ADC1_Init+0x98>)
 800092a:	2200      	movs	r2, #0
 800092c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800092e:	4b16      	ldr	r3, [pc, #88]	@ (8000988 <MX_ADC1_Init+0x98>)
 8000930:	4a17      	ldr	r2, [pc, #92]	@ (8000990 <MX_ADC1_Init+0xa0>)
 8000932:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000934:	4b14      	ldr	r3, [pc, #80]	@ (8000988 <MX_ADC1_Init+0x98>)
 8000936:	2200      	movs	r2, #0
 8000938:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800093a:	4b13      	ldr	r3, [pc, #76]	@ (8000988 <MX_ADC1_Init+0x98>)
 800093c:	2201      	movs	r2, #1
 800093e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000940:	4b11      	ldr	r3, [pc, #68]	@ (8000988 <MX_ADC1_Init+0x98>)
 8000942:	2201      	movs	r2, #1
 8000944:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000948:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <MX_ADC1_Init+0x98>)
 800094a:	2200      	movs	r2, #0
 800094c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800094e:	480e      	ldr	r0, [pc, #56]	@ (8000988 <MX_ADC1_Init+0x98>)
 8000950:	f000 fbf0 	bl	8001134 <HAL_ADC_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800095a:	f000 f8f3 	bl	8000b44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800095e:	2303      	movs	r3, #3
 8000960:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000962:	2301      	movs	r3, #1
 8000964:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000966:	2301      	movs	r3, #1
 8000968:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800096a:	463b      	mov	r3, r7
 800096c:	4619      	mov	r1, r3
 800096e:	4806      	ldr	r0, [pc, #24]	@ (8000988 <MX_ADC1_Init+0x98>)
 8000970:	f000 fe58 	bl	8001624 <HAL_ADC_ConfigChannel>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800097a:	f000 f8e3 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000034 	.word	0x20000034
 800098c:	40012000 	.word	0x40012000
 8000990:	0f000001 	.word	0x0f000001

08000994 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800099a:	463b      	mov	r3, r7
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80009a2:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <MX_DAC_Init+0x4c>)
 80009a4:	4a0f      	ldr	r2, [pc, #60]	@ (80009e4 <MX_DAC_Init+0x50>)
 80009a6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80009a8:	480d      	ldr	r0, [pc, #52]	@ (80009e0 <MX_DAC_Init+0x4c>)
 80009aa:	f001 f9f6 	bl	8001d9a <HAL_DAC_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80009b4:	f000 f8c6 	bl	8000b44 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80009b8:	230c      	movs	r3, #12
 80009ba:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009c0:	463b      	mov	r3, r7
 80009c2:	2200      	movs	r2, #0
 80009c4:	4619      	mov	r1, r3
 80009c6:	4806      	ldr	r0, [pc, #24]	@ (80009e0 <MX_DAC_Init+0x4c>)
 80009c8:	f001 fa8a 	bl	8001ee0 <HAL_DAC_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80009d2:	f000 f8b7 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200000dc 	.word	0x200000dc
 80009e4:	40007400 	.word	0x40007400

080009e8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ee:	f107 0308 	add.w	r3, r7, #8
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fc:	463b      	mov	r3, r7
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000a04:	4b1e      	ldr	r3, [pc, #120]	@ (8000a80 <MX_TIM8_Init+0x98>)
 8000a06:	4a1f      	ldr	r2, [pc, #124]	@ (8000a84 <MX_TIM8_Init+0x9c>)
 8000a08:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1000-1;
 8000a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a80 <MX_TIM8_Init+0x98>)
 8000a0c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a10:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a12:	4b1b      	ldr	r3, [pc, #108]	@ (8000a80 <MX_TIM8_Init+0x98>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1-1;
 8000a18:	4b19      	ldr	r3, [pc, #100]	@ (8000a80 <MX_TIM8_Init+0x98>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1e:	4b18      	ldr	r3, [pc, #96]	@ (8000a80 <MX_TIM8_Init+0x98>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000a24:	4b16      	ldr	r3, [pc, #88]	@ (8000a80 <MX_TIM8_Init+0x98>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2a:	4b15      	ldr	r3, [pc, #84]	@ (8000a80 <MX_TIM8_Init+0x98>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000a30:	4813      	ldr	r0, [pc, #76]	@ (8000a80 <MX_TIM8_Init+0x98>)
 8000a32:	f002 fc1f 	bl	8003274 <HAL_TIM_Base_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8000a3c:	f000 f882 	bl	8000b44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000a46:	f107 0308 	add.w	r3, r7, #8
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480c      	ldr	r0, [pc, #48]	@ (8000a80 <MX_TIM8_Init+0x98>)
 8000a4e:	f002 fcc9 	bl	80033e4 <HAL_TIM_ConfigClockSource>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8000a58:	f000 f874 	bl	8000b44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a5c:	2320      	movs	r3, #32
 8000a5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a64:	463b      	mov	r3, r7
 8000a66:	4619      	mov	r1, r3
 8000a68:	4805      	ldr	r0, [pc, #20]	@ (8000a80 <MX_TIM8_Init+0x98>)
 8000a6a:	f002 fec9 	bl	8003800 <HAL_TIMEx_MasterConfigSynchronization>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000a74:	f000 f866 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000150 	.word	0x20000150
 8000a84:	40010400 	.word	0x40010400

08000a88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b17      	ldr	r3, [pc, #92]	@ (8000af0 <MX_DMA_Init+0x68>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	4a16      	ldr	r2, [pc, #88]	@ (8000af0 <MX_DMA_Init+0x68>)
 8000a98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9e:	4b14      	ldr	r3, [pc, #80]	@ (8000af0 <MX_DMA_Init+0x68>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b10      	ldr	r3, [pc, #64]	@ (8000af0 <MX_DMA_Init+0x68>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	4a0f      	ldr	r2, [pc, #60]	@ (8000af0 <MX_DMA_Init+0x68>)
 8000ab4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aba:	4b0d      	ldr	r3, [pc, #52]	@ (8000af0 <MX_DMA_Init+0x68>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2010      	movs	r0, #16
 8000acc:	f001 f92f 	bl	8001d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ad0:	2010      	movs	r0, #16
 8000ad2:	f001 f948 	bl	8001d66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2038      	movs	r0, #56	@ 0x38
 8000adc:	f001 f927 	bl	8001d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ae0:	2038      	movs	r0, #56	@ 0x38
 8000ae2:	f001 f940 	bl	8001d66 <HAL_NVIC_EnableIRQ>

}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800

08000af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <MX_GPIO_Init+0x4c>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	4a0f      	ldr	r2, [pc, #60]	@ (8000b40 <MX_GPIO_Init+0x4c>)
 8000b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b40 <MX_GPIO_Init+0x4c>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <MX_GPIO_Init+0x4c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a08      	ldr	r2, [pc, #32]	@ (8000b40 <MX_GPIO_Init+0x4c>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <MX_GPIO_Init+0x4c>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800

08000b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <Error_Handler+0x8>

08000b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b10      	ldr	r3, [pc, #64]	@ (8000b9c <HAL_MspInit+0x4c>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b9c <HAL_MspInit+0x4c>)
 8000b60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b66:	4b0d      	ldr	r3, [pc, #52]	@ (8000b9c <HAL_MspInit+0x4c>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	4b09      	ldr	r3, [pc, #36]	@ (8000b9c <HAL_MspInit+0x4c>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7a:	4a08      	ldr	r2, [pc, #32]	@ (8000b9c <HAL_MspInit+0x4c>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b82:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <HAL_MspInit+0x4c>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800

08000ba0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	@ 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a33      	ldr	r2, [pc, #204]	@ (8000c8c <HAL_ADC_MspInit+0xec>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d160      	bne.n	8000c84 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b32      	ldr	r3, [pc, #200]	@ (8000c90 <HAL_ADC_MspInit+0xf0>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bca:	4a31      	ldr	r2, [pc, #196]	@ (8000c90 <HAL_ADC_MspInit+0xf0>)
 8000bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bd2:	4b2f      	ldr	r3, [pc, #188]	@ (8000c90 <HAL_ADC_MspInit+0xf0>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b2b      	ldr	r3, [pc, #172]	@ (8000c90 <HAL_ADC_MspInit+0xf0>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a2a      	ldr	r2, [pc, #168]	@ (8000c90 <HAL_ADC_MspInit+0xf0>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b28      	ldr	r3, [pc, #160]	@ (8000c90 <HAL_ADC_MspInit+0xf0>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bfa:	2308      	movs	r3, #8
 8000bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4821      	ldr	r0, [pc, #132]	@ (8000c94 <HAL_ADC_MspInit+0xf4>)
 8000c0e:	f001 fd31 	bl	8002674 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c12:	4b21      	ldr	r3, [pc, #132]	@ (8000c98 <HAL_ADC_MspInit+0xf8>)
 8000c14:	4a21      	ldr	r2, [pc, #132]	@ (8000c9c <HAL_ADC_MspInit+0xfc>)
 8000c16:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c18:	4b1f      	ldr	r3, [pc, #124]	@ (8000c98 <HAL_ADC_MspInit+0xf8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c98 <HAL_ADC_MspInit+0xf8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c24:	4b1c      	ldr	r3, [pc, #112]	@ (8000c98 <HAL_ADC_MspInit+0xf8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c98 <HAL_ADC_MspInit+0xf8>)
 8000c2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c30:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c32:	4b19      	ldr	r3, [pc, #100]	@ (8000c98 <HAL_ADC_MspInit+0xf8>)
 8000c34:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c38:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c3a:	4b17      	ldr	r3, [pc, #92]	@ (8000c98 <HAL_ADC_MspInit+0xf8>)
 8000c3c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c40:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c42:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <HAL_ADC_MspInit+0xf8>)
 8000c44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c48:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000c4a:	4b13      	ldr	r3, [pc, #76]	@ (8000c98 <HAL_ADC_MspInit+0xf8>)
 8000c4c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000c50:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c52:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <HAL_ADC_MspInit+0xf8>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c58:	480f      	ldr	r0, [pc, #60]	@ (8000c98 <HAL_ADC_MspInit+0xf8>)
 8000c5a:	f001 f99b 	bl	8001f94 <HAL_DMA_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000c64:	f7ff ff6e 	bl	8000b44 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c98 <HAL_ADC_MspInit+0xf8>)
 8000c6c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c98 <HAL_ADC_MspInit+0xf8>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2100      	movs	r1, #0
 8000c78:	2012      	movs	r0, #18
 8000c7a:	f001 f858 	bl	8001d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000c7e:	2012      	movs	r0, #18
 8000c80:	f001 f871 	bl	8001d66 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c84:	bf00      	nop
 8000c86:	3728      	adds	r7, #40	@ 0x28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40012000 	.word	0x40012000
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020000 	.word	0x40020000
 8000c98:	2000007c 	.word	0x2000007c
 8000c9c:	40026410 	.word	0x40026410

08000ca0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	@ 0x28
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a30      	ldr	r2, [pc, #192]	@ (8000d80 <HAL_DAC_MspInit+0xe0>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d159      	bne.n	8000d76 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	4b2f      	ldr	r3, [pc, #188]	@ (8000d84 <HAL_DAC_MspInit+0xe4>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cca:	4a2e      	ldr	r2, [pc, #184]	@ (8000d84 <HAL_DAC_MspInit+0xe4>)
 8000ccc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000cd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cd2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d84 <HAL_DAC_MspInit+0xe4>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b28      	ldr	r3, [pc, #160]	@ (8000d84 <HAL_DAC_MspInit+0xe4>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a27      	ldr	r2, [pc, #156]	@ (8000d84 <HAL_DAC_MspInit+0xe4>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b25      	ldr	r3, [pc, #148]	@ (8000d84 <HAL_DAC_MspInit+0xe4>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cfa:	2310      	movs	r3, #16
 8000cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	481e      	ldr	r0, [pc, #120]	@ (8000d88 <HAL_DAC_MspInit+0xe8>)
 8000d0e:	f001 fcb1 	bl	8002674 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000d12:	4b1e      	ldr	r3, [pc, #120]	@ (8000d8c <HAL_DAC_MspInit+0xec>)
 8000d14:	4a1e      	ldr	r2, [pc, #120]	@ (8000d90 <HAL_DAC_MspInit+0xf0>)
 8000d16:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000d18:	4b1c      	ldr	r3, [pc, #112]	@ (8000d8c <HAL_DAC_MspInit+0xec>)
 8000d1a:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000d1e:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d20:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <HAL_DAC_MspInit+0xec>)
 8000d22:	2240      	movs	r2, #64	@ 0x40
 8000d24:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d26:	4b19      	ldr	r3, [pc, #100]	@ (8000d8c <HAL_DAC_MspInit+0xec>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000d2c:	4b17      	ldr	r3, [pc, #92]	@ (8000d8c <HAL_DAC_MspInit+0xec>)
 8000d2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d32:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d34:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <HAL_DAC_MspInit+0xec>)
 8000d36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d3a:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d3c:	4b13      	ldr	r3, [pc, #76]	@ (8000d8c <HAL_DAC_MspInit+0xec>)
 8000d3e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d42:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8000d44:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <HAL_DAC_MspInit+0xec>)
 8000d46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d4a:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <HAL_DAC_MspInit+0xec>)
 8000d4e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000d52:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d54:	4b0d      	ldr	r3, [pc, #52]	@ (8000d8c <HAL_DAC_MspInit+0xec>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000d5a:	480c      	ldr	r0, [pc, #48]	@ (8000d8c <HAL_DAC_MspInit+0xec>)
 8000d5c:	f001 f91a 	bl	8001f94 <HAL_DMA_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000d66:	f7ff feed 	bl	8000b44 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a07      	ldr	r2, [pc, #28]	@ (8000d8c <HAL_DAC_MspInit+0xec>)
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	4a06      	ldr	r2, [pc, #24]	@ (8000d8c <HAL_DAC_MspInit+0xec>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8000d76:	bf00      	nop
 8000d78:	3728      	adds	r7, #40	@ 0x28
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40007400 	.word	0x40007400
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020000 	.word	0x40020000
 8000d8c:	200000f0 	.word	0x200000f0
 8000d90:	40026088 	.word	0x40026088

08000d94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM8)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd0 <HAL_TIM_Base_MspInit+0x3c>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d10d      	bne.n	8000dc2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd4 <HAL_TIM_Base_MspInit+0x40>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dae:	4a09      	ldr	r2, [pc, #36]	@ (8000dd4 <HAL_TIM_Base_MspInit+0x40>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000db6:	4b07      	ldr	r3, [pc, #28]	@ (8000dd4 <HAL_TIM_Base_MspInit+0x40>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8000dc2:	bf00      	nop
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40010400 	.word	0x40010400
 8000dd4:	40023800 	.word	0x40023800

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <NMI_Handler+0x4>

08000de0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <HardFault_Handler+0x4>

08000de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <MemManage_Handler+0x4>

08000df0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <BusFault_Handler+0x4>

08000df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <UsageFault_Handler+0x4>

08000e00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e2e:	f000 f961 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8000e3c:	4802      	ldr	r0, [pc, #8]	@ (8000e48 <DMA1_Stream5_IRQHandler+0x10>)
 8000e3e:	f001 f9af 	bl	80021a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200000f0 	.word	0x200000f0

08000e4c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e50:	4802      	ldr	r0, [pc, #8]	@ (8000e5c <ADC_IRQHandler+0x10>)
 8000e52:	f000 f9b2 	bl	80011ba <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000034 	.word	0x20000034

08000e60 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e64:	4802      	ldr	r0, [pc, #8]	@ (8000e70 <DMA2_Stream0_IRQHandler+0x10>)
 8000e66:	f001 f99b 	bl	80021a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	2000007c 	.word	0x2000007c

08000e74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <SystemInit+0x20>)
 8000e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e7e:	4a05      	ldr	r2, [pc, #20]	@ (8000e94 <SystemInit+0x20>)
 8000e80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ed0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e9c:	f7ff ffea 	bl	8000e74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea0:	480c      	ldr	r0, [pc, #48]	@ (8000ed4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ea2:	490d      	ldr	r1, [pc, #52]	@ (8000ed8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8000edc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea8:	e002      	b.n	8000eb0 <LoopCopyDataInit>

08000eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eae:	3304      	adds	r3, #4

08000eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb4:	d3f9      	bcc.n	8000eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000eb8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ee4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ebc:	e001      	b.n	8000ec2 <LoopFillZerobss>

08000ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec0:	3204      	adds	r2, #4

08000ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec4:	d3fb      	bcc.n	8000ebe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ec6:	f002 fd1f 	bl	8003908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eca:	f7ff fc77 	bl	80007bc <main>
  bx  lr    
 8000ece:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ed0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000edc:	08003a90 	.word	0x08003a90
  ldr r2, =_sbss
 8000ee0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000ee4:	20000788 	.word	0x20000788

08000ee8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <CAN1_RX0_IRQHandler>

08000eea <arm_biquad_cascade_df2T_f32>:
ARM_DSP_ATTRIBUTE void arm_biquad_cascade_df2T_f32(
  const arm_biquad_cascade_df2T_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b095      	sub	sp, #84	@ 0x54
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	60f8      	str	r0, [r7, #12]
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
 8000ef6:	603b      	str	r3, [r7, #0]
  const float32_t *pIn = pSrc;                         /* Source pointer */
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
        float32_t *pOut = pDst;                        /* Destination pointer */
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	64bb      	str	r3, [r7, #72]	@ 0x48
        float32_t *pState = S->pState;                 /* State pointer */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	647b      	str	r3, [r7, #68]	@ 0x44
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	643b      	str	r3, [r7, #64]	@ 0x40
        float32_t acc1;                                /* Accumulator */
        float32_t b0, b1, b2, a1, a2;                  /* Filter coefficients */
        float32_t Xn1;                                 /* Temporary input */
        float32_t d1, d2;                              /* State variables */
        uint32_t sample, stage = S->numStages;         /* Loop counters */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	633b      	str	r3, [r7, #48]	@ 0x30

  do
  {
     /* Reading the coefficients */
     b0 = pCoeffs[0];
 8000f12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
     b1 = pCoeffs[1];
 8000f18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f1a:	3304      	adds	r3, #4
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
     b2 = pCoeffs[2];
 8000f20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f22:	3308      	adds	r3, #8
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	627b      	str	r3, [r7, #36]	@ 0x24
     a1 = pCoeffs[3];
 8000f28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f2a:	330c      	adds	r3, #12
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	623b      	str	r3, [r7, #32]
     a2 = pCoeffs[4];
 8000f30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f32:	3310      	adds	r3, #16
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	61fb      	str	r3, [r7, #28]

     /* Reading the state values */
     d1 = pState[0];
 8000f38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
     d2 = pState[1];
 8000f3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	63bb      	str	r3, [r7, #56]	@ 0x38

     pCoeffs += 5U;
 8000f44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f46:	3314      	adds	r3, #20
 8000f48:	643b      	str	r3, [r7, #64]	@ 0x40
      sample = blockSize & 0xFU;

#else

      /* Initialize blkCnt with number of samples */
      sample = blockSize;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	637b      	str	r3, [r7, #52]	@ 0x34

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (sample > 0U) {
 8000f4e:	e044      	b.n	8000fda <arm_biquad_cascade_df2T_f32+0xf0>
        Xn1 = *pIn++;
 8000f50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f52:	1d1a      	adds	r2, r3, #4
 8000f54:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	61bb      	str	r3, [r7, #24]

        acc1 = b0 * Xn1 + d1;
 8000f5a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000f5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f66:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000f6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f6e:	edc7 7a05 	vstr	s15, [r7, #20]

        d1 = b1 * Xn1 + d2;
 8000f72:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000f76:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f7e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8000f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f86:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
        d1 += a1 * acc1;
 8000f8a:	ed97 7a08 	vldr	s14, [r7, #32]
 8000f8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8000f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f9e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

        d2 = b2 * Xn1;
 8000fa2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000fa6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fae:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
        d2 += a2 * acc1;
 8000fb2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fb6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fbe:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8000fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc6:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

        *pOut++ = acc1;
 8000fca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000fcc:	1d1a      	adds	r2, r3, #4
 8000fce:	64ba      	str	r2, [r7, #72]	@ 0x48
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	601a      	str	r2, [r3, #0]

        /* decrement loop counter */
        sample--;
 8000fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	637b      	str	r3, [r7, #52]	@ 0x34
      while (sample > 0U) {
 8000fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1b7      	bne.n	8000f50 <arm_biquad_cascade_df2T_f32+0x66>
      }

      /* Store the updated state variables back into the state array */
      pState[0] = d1;
 8000fe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000fe2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000fe4:	601a      	str	r2, [r3, #0]
      pState[1] = d2;
 8000fe6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000fe8:	3304      	adds	r3, #4
 8000fea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000fec:	601a      	str	r2, [r3, #0]

      pState += 2U;
 8000fee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ff0:	3308      	adds	r3, #8
 8000ff2:	647b      	str	r3, [r7, #68]	@ 0x44

      /* The current stage output is given as the input to the next stage */
      pIn = pDst;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Reset the output working pointer */
      pOut = pDst;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	64bb      	str	r3, [r7, #72]	@ 0x48

      /* decrement loop counter */
      stage--;
 8000ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ffe:	3b01      	subs	r3, #1
 8001000:	633b      	str	r3, [r7, #48]	@ 0x30

   } while (stage > 0U);
 8001002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001004:	2b00      	cmp	r3, #0
 8001006:	d184      	bne.n	8000f12 <arm_biquad_cascade_df2T_f32+0x28>

}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	3754      	adds	r7, #84	@ 0x54
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <arm_biquad_cascade_df2T_init_f32>:
ARM_DSP_ATTRIBUTE void arm_biquad_cascade_df2T_init_f32(
        arm_biquad_cascade_df2T_instance_f32 * S,
        uint8_t numStages,
  const float32_t * pCoeffs,
        float32_t * pState)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b084      	sub	sp, #16
 800101a:	af00      	add	r7, sp, #0
 800101c:	60f8      	str	r0, [r7, #12]
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	603b      	str	r3, [r7, #0]
 8001022:	460b      	mov	r3, r1
 8001024:	72fb      	strb	r3, [r7, #11]
  /* Assign filter stages */
  S->numStages = numStages;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	7afa      	ldrb	r2, [r7, #11]
 800102a:	701a      	strb	r2, [r3, #0]

  /* Assign coefficient pointer */
  S->pCoeffs = pCoeffs;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	609a      	str	r2, [r3, #8]

  /* Clear state buffer and size is always 2 * numStages */
  memset(pState, 0, (2U * (uint32_t) numStages) * sizeof(float32_t));
 8001032:	7afb      	ldrb	r3, [r7, #11]
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	461a      	mov	r2, r3
 8001038:	2100      	movs	r1, #0
 800103a:	6838      	ldr	r0, [r7, #0]
 800103c:	f002 fc5c 	bl	80038f8 <memset>

  /* Assign state pointer */
  S->pState = pState;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	605a      	str	r2, [r3, #4]
}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001054:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0d      	ldr	r2, [pc, #52]	@ (8001090 <HAL_Init+0x40>)
 800105a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800105e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001060:	4b0b      	ldr	r3, [pc, #44]	@ (8001090 <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0a      	ldr	r2, [pc, #40]	@ (8001090 <HAL_Init+0x40>)
 8001066:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800106a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106c:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a07      	ldr	r2, [pc, #28]	@ (8001090 <HAL_Init+0x40>)
 8001072:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f000 fe4d 	bl	8001d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107e:	200f      	movs	r0, #15
 8001080:	f000 f808 	bl	8001094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001084:	f7ff fd64 	bl	8000b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023c00 	.word	0x40023c00

08001094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800109c:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <HAL_InitTick+0x54>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b12      	ldr	r3, [pc, #72]	@ (80010ec <HAL_InitTick+0x58>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 fe65 	bl	8001d82 <HAL_SYSTICK_Config>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e00e      	b.n	80010e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d80a      	bhi.n	80010de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f000 fe2d 	bl	8001d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d4:	4a06      	ldr	r2, [pc, #24]	@ (80010f0 <HAL_InitTick+0x5c>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	2000000c 	.word	0x2000000c
 80010ec:	20000014 	.word	0x20000014
 80010f0:	20000010 	.word	0x20000010

080010f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f8:	4b06      	ldr	r3, [pc, #24]	@ (8001114 <HAL_IncTick+0x20>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b06      	ldr	r3, [pc, #24]	@ (8001118 <HAL_IncTick+0x24>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a04      	ldr	r2, [pc, #16]	@ (8001118 <HAL_IncTick+0x24>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000014 	.word	0x20000014
 8001118:	20000784 	.word	0x20000784

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b03      	ldr	r3, [pc, #12]	@ (8001130 <HAL_GetTick+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000784 	.word	0x20000784

08001134 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800113c:	2300      	movs	r3, #0
 800113e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e033      	b.n	80011b2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114e:	2b00      	cmp	r3, #0
 8001150:	d109      	bne.n	8001166 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff fd24 	bl	8000ba0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116a:	f003 0310 	and.w	r3, r3, #16
 800116e:	2b00      	cmp	r3, #0
 8001170:	d118      	bne.n	80011a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001176:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800117a:	f023 0302 	bic.w	r3, r3, #2
 800117e:	f043 0202 	orr.w	r2, r3, #2
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 fb6e 	bl	8001868 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001196:	f023 0303 	bic.w	r3, r3, #3
 800119a:	f043 0201 	orr.w	r2, r3, #1
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80011a2:	e001      	b.n	80011a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b086      	sub	sp, #24
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	2300      	movs	r3, #0
 80011c8:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	f003 0320 	and.w	r3, r3, #32
 80011e8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d049      	beq.n	8001284 <HAL_ADC_IRQHandler+0xca>
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d046      	beq.n	8001284 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fa:	f003 0310 	and.w	r3, r3, #16
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d105      	bne.n	800120e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d12b      	bne.n	8001274 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001220:	2b00      	cmp	r3, #0
 8001222:	d127      	bne.n	8001274 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800122a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800122e:	2b00      	cmp	r3, #0
 8001230:	d006      	beq.n	8001240 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800123c:	2b00      	cmp	r3, #0
 800123e:	d119      	bne.n	8001274 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0220 	bic.w	r2, r2, #32
 800124e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001254:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001260:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d105      	bne.n	8001274 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126c:	f043 0201 	orr.w	r2, r3, #1
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff f993 	bl	80005a0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f06f 0212 	mvn.w	r2, #18
 8001282:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001292:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d057      	beq.n	800134a <HAL_ADC_IRQHandler+0x190>
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d054      	beq.n	800134a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a4:	f003 0310 	and.w	r3, r3, #16
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d105      	bne.n	80012b8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d139      	bne.n	800133a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012cc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d006      	beq.n	80012e2 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d12b      	bne.n	800133a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d124      	bne.n	800133a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d11d      	bne.n	800133a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001302:	2b00      	cmp	r3, #0
 8001304:	d119      	bne.n	800133a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001314:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800132a:	2b00      	cmp	r3, #0
 800132c:	d105      	bne.n	800133a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001332:	f043 0201 	orr.w	r2, r3, #1
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 fc12 	bl	8001b64 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f06f 020c 	mvn.w	r2, #12
 8001348:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001358:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d017      	beq.n	8001390 <HAL_ADC_IRQHandler+0x1d6>
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d014      	beq.n	8001390 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	2b01      	cmp	r3, #1
 8001372:	d10d      	bne.n	8001390 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001378:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 f93b 	bl	80015fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f06f 0201 	mvn.w	r2, #1
 800138e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 0320 	and.w	r3, r3, #32
 8001396:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800139e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d015      	beq.n	80013d2 <HAL_ADC_IRQHandler+0x218>
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d012      	beq.n	80013d2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b0:	f043 0202 	orr.w	r2, r3, #2
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f06f 0220 	mvn.w	r2, #32
 80013c0:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f000 f924 	bl	8001610 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f06f 0220 	mvn.w	r2, #32
 80013d0:	601a      	str	r2, [r3, #0]
  }
}
 80013d2:	bf00      	nop
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80013e8:	2300      	movs	r3, #0
 80013ea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d101      	bne.n	80013fa <HAL_ADC_Start_DMA+0x1e>
 80013f6:	2302      	movs	r3, #2
 80013f8:	e0e9      	b.n	80015ce <HAL_ADC_Start_DMA+0x1f2>
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 0301 	and.w	r3, r3, #1
 800140c:	2b01      	cmp	r3, #1
 800140e:	d018      	beq.n	8001442 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 0201 	orr.w	r2, r2, #1
 800141e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001420:	4b6d      	ldr	r3, [pc, #436]	@ (80015d8 <HAL_ADC_Start_DMA+0x1fc>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a6d      	ldr	r2, [pc, #436]	@ (80015dc <HAL_ADC_Start_DMA+0x200>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	0c9a      	lsrs	r2, r3, #18
 800142c:	4613      	mov	r3, r2
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	4413      	add	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001434:	e002      	b.n	800143c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	3b01      	subs	r3, #1
 800143a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f9      	bne.n	8001436 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800144c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001450:	d107      	bne.n	8001462 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001460:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b01      	cmp	r3, #1
 800146e:	f040 80a1 	bne.w	80015b4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001476:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800147a:	f023 0301 	bic.w	r3, r3, #1
 800147e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001490:	2b00      	cmp	r3, #0
 8001492:	d007      	beq.n	80014a4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001498:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800149c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014b0:	d106      	bne.n	80014c0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b6:	f023 0206 	bic.w	r2, r3, #6
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	645a      	str	r2, [r3, #68]	@ 0x44
 80014be:	e002      	b.n	80014c6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2200      	movs	r2, #0
 80014c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014ce:	4b44      	ldr	r3, [pc, #272]	@ (80015e0 <HAL_ADC_Start_DMA+0x204>)
 80014d0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014d6:	4a43      	ldr	r2, [pc, #268]	@ (80015e4 <HAL_ADC_Start_DMA+0x208>)
 80014d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014de:	4a42      	ldr	r2, [pc, #264]	@ (80015e8 <HAL_ADC_Start_DMA+0x20c>)
 80014e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014e6:	4a41      	ldr	r2, [pc, #260]	@ (80015ec <HAL_ADC_Start_DMA+0x210>)
 80014e8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80014f2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001502:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001512:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	334c      	adds	r3, #76	@ 0x4c
 800151e:	4619      	mov	r1, r3
 8001520:	68ba      	ldr	r2, [r7, #8]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f000 fde4 	bl	80020f0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 031f 	and.w	r3, r3, #31
 8001530:	2b00      	cmp	r3, #0
 8001532:	d12a      	bne.n	800158a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a2d      	ldr	r2, [pc, #180]	@ (80015f0 <HAL_ADC_Start_DMA+0x214>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d015      	beq.n	800156a <HAL_ADC_Start_DMA+0x18e>
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a2c      	ldr	r2, [pc, #176]	@ (80015f4 <HAL_ADC_Start_DMA+0x218>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d105      	bne.n	8001554 <HAL_ADC_Start_DMA+0x178>
 8001548:	4b25      	ldr	r3, [pc, #148]	@ (80015e0 <HAL_ADC_Start_DMA+0x204>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f003 031f 	and.w	r3, r3, #31
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00a      	beq.n	800156a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a27      	ldr	r2, [pc, #156]	@ (80015f8 <HAL_ADC_Start_DMA+0x21c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d136      	bne.n	80015cc <HAL_ADC_Start_DMA+0x1f0>
 800155e:	4b20      	ldr	r3, [pc, #128]	@ (80015e0 <HAL_ADC_Start_DMA+0x204>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 0310 	and.w	r3, r3, #16
 8001566:	2b00      	cmp	r3, #0
 8001568:	d130      	bne.n	80015cc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d129      	bne.n	80015cc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	e020      	b.n	80015cc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a18      	ldr	r2, [pc, #96]	@ (80015f0 <HAL_ADC_Start_DMA+0x214>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d11b      	bne.n	80015cc <HAL_ADC_Start_DMA+0x1f0>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d114      	bne.n	80015cc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	e00b      	b.n	80015cc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b8:	f043 0210 	orr.w	r2, r3, #16
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c4:	f043 0201 	orr.w	r2, r3, #1
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	2000000c 	.word	0x2000000c
 80015dc:	431bde83 	.word	0x431bde83
 80015e0:	40012300 	.word	0x40012300
 80015e4:	08001a61 	.word	0x08001a61
 80015e8:	08001b1b 	.word	0x08001b1b
 80015ec:	08001b37 	.word	0x08001b37
 80015f0:	40012000 	.word	0x40012000
 80015f4:	40012100 	.word	0x40012100
 80015f8:	40012200 	.word	0x40012200

080015fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001638:	2b01      	cmp	r3, #1
 800163a:	d101      	bne.n	8001640 <HAL_ADC_ConfigChannel+0x1c>
 800163c:	2302      	movs	r3, #2
 800163e:	e105      	b.n	800184c <HAL_ADC_ConfigChannel+0x228>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2b09      	cmp	r3, #9
 800164e:	d925      	bls.n	800169c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68d9      	ldr	r1, [r3, #12]
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	b29b      	uxth	r3, r3
 800165c:	461a      	mov	r2, r3
 800165e:	4613      	mov	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	4413      	add	r3, r2
 8001664:	3b1e      	subs	r3, #30
 8001666:	2207      	movs	r2, #7
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43da      	mvns	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	400a      	ands	r2, r1
 8001674:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68d9      	ldr	r1, [r3, #12]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	b29b      	uxth	r3, r3
 8001686:	4618      	mov	r0, r3
 8001688:	4603      	mov	r3, r0
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	4403      	add	r3, r0
 800168e:	3b1e      	subs	r3, #30
 8001690:	409a      	lsls	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	e022      	b.n	80016e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6919      	ldr	r1, [r3, #16]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	461a      	mov	r2, r3
 80016aa:	4613      	mov	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4413      	add	r3, r2
 80016b0:	2207      	movs	r2, #7
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43da      	mvns	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	400a      	ands	r2, r1
 80016be:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6919      	ldr	r1, [r3, #16]
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	4618      	mov	r0, r3
 80016d2:	4603      	mov	r3, r0
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	4403      	add	r3, r0
 80016d8:	409a      	lsls	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	430a      	orrs	r2, r1
 80016e0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b06      	cmp	r3, #6
 80016e8:	d824      	bhi.n	8001734 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	3b05      	subs	r3, #5
 80016fc:	221f      	movs	r2, #31
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43da      	mvns	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	400a      	ands	r2, r1
 800170a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	b29b      	uxth	r3, r3
 8001718:	4618      	mov	r0, r3
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	3b05      	subs	r3, #5
 8001726:	fa00 f203 	lsl.w	r2, r0, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	635a      	str	r2, [r3, #52]	@ 0x34
 8001732:	e04c      	b.n	80017ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b0c      	cmp	r3, #12
 800173a:	d824      	bhi.n	8001786 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	3b23      	subs	r3, #35	@ 0x23
 800174e:	221f      	movs	r2, #31
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43da      	mvns	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	400a      	ands	r2, r1
 800175c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	b29b      	uxth	r3, r3
 800176a:	4618      	mov	r0, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	3b23      	subs	r3, #35	@ 0x23
 8001778:	fa00 f203 	lsl.w	r2, r0, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	430a      	orrs	r2, r1
 8001782:	631a      	str	r2, [r3, #48]	@ 0x30
 8001784:	e023      	b.n	80017ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	3b41      	subs	r3, #65	@ 0x41
 8001798:	221f      	movs	r2, #31
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	43da      	mvns	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	400a      	ands	r2, r1
 80017a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	4618      	mov	r0, r3
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	3b41      	subs	r3, #65	@ 0x41
 80017c2:	fa00 f203 	lsl.w	r2, r0, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017ce:	4b22      	ldr	r3, [pc, #136]	@ (8001858 <HAL_ADC_ConfigChannel+0x234>)
 80017d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a21      	ldr	r2, [pc, #132]	@ (800185c <HAL_ADC_ConfigChannel+0x238>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d109      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x1cc>
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b12      	cmp	r3, #18
 80017e2:	d105      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a19      	ldr	r2, [pc, #100]	@ (800185c <HAL_ADC_ConfigChannel+0x238>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d123      	bne.n	8001842 <HAL_ADC_ConfigChannel+0x21e>
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b10      	cmp	r3, #16
 8001800:	d003      	beq.n	800180a <HAL_ADC_ConfigChannel+0x1e6>
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b11      	cmp	r3, #17
 8001808:	d11b      	bne.n	8001842 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b10      	cmp	r3, #16
 800181c:	d111      	bne.n	8001842 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800181e:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <HAL_ADC_ConfigChannel+0x23c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a10      	ldr	r2, [pc, #64]	@ (8001864 <HAL_ADC_ConfigChannel+0x240>)
 8001824:	fba2 2303 	umull	r2, r3, r2, r3
 8001828:	0c9a      	lsrs	r2, r3, #18
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001834:	e002      	b.n	800183c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	3b01      	subs	r3, #1
 800183a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1f9      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	40012300 	.word	0x40012300
 800185c:	40012000 	.word	0x40012000
 8001860:	2000000c 	.word	0x2000000c
 8001864:	431bde83 	.word	0x431bde83

08001868 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001870:	4b79      	ldr	r3, [pc, #484]	@ (8001a58 <ADC_Init+0x1f0>)
 8001872:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	431a      	orrs	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800189c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	6859      	ldr	r1, [r3, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	021a      	lsls	r2, r3, #8
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80018c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6859      	ldr	r1, [r3, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	6899      	ldr	r1, [r3, #8]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fa:	4a58      	ldr	r2, [pc, #352]	@ (8001a5c <ADC_Init+0x1f4>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d022      	beq.n	8001946 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689a      	ldr	r2, [r3, #8]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800190e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6899      	ldr	r1, [r3, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	430a      	orrs	r2, r1
 8001920:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001930:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6899      	ldr	r1, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	e00f      	b.n	8001966 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001954:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001964:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 0202 	bic.w	r2, r2, #2
 8001974:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6899      	ldr	r1, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	7e1b      	ldrb	r3, [r3, #24]
 8001980:	005a      	lsls	r2, r3, #1
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d01b      	beq.n	80019cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019a2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80019b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6859      	ldr	r1, [r3, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019be:	3b01      	subs	r3, #1
 80019c0:	035a      	lsls	r2, r3, #13
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	e007      	b.n	80019dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80019da:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80019ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	051a      	lsls	r2, r3, #20
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001a10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6899      	ldr	r1, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a1e:	025a      	lsls	r2, r3, #9
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6899      	ldr	r1, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	029a      	lsls	r2, r3, #10
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	609a      	str	r2, [r3, #8]
}
 8001a4c:	bf00      	nop
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	40012300 	.word	0x40012300
 8001a5c:	0f000001 	.word	0x0f000001

08001a60 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a6c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d13c      	bne.n	8001af4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d12b      	bne.n	8001aec <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d127      	bne.n	8001aec <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d006      	beq.n	8001ab8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d119      	bne.n	8001aec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	685a      	ldr	r2, [r3, #4]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0220 	bic.w	r2, r2, #32
 8001ac6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001acc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d105      	bne.n	8001aec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae4:	f043 0201 	orr.w	r2, r3, #1
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f7fe fd57 	bl	80005a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001af2:	e00e      	b.n	8001b12 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af8:	f003 0310 	and.w	r3, r3, #16
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f7ff fd85 	bl	8001610 <HAL_ADC_ErrorCallback>
}
 8001b06:	e004      	b.n	8001b12 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	4798      	blx	r3
}
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b26:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f7fe fcc5 	bl	80004b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b2e:	bf00      	nop
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b42:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2240      	movs	r2, #64	@ 0x40
 8001b48:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4e:	f043 0204 	orr.w	r2, r3, #4
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f7ff fd5a 	bl	8001610 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b5c:	bf00      	nop
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b88:	4b0c      	ldr	r3, [pc, #48]	@ (8001bbc <__NVIC_SetPriorityGrouping+0x44>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b8e:	68ba      	ldr	r2, [r7, #8]
 8001b90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b94:	4013      	ands	r3, r2
 8001b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001baa:	4a04      	ldr	r2, [pc, #16]	@ (8001bbc <__NVIC_SetPriorityGrouping+0x44>)
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	60d3      	str	r3, [r2, #12]
}
 8001bb0:	bf00      	nop
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc4:	4b04      	ldr	r3, [pc, #16]	@ (8001bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	0a1b      	lsrs	r3, r3, #8
 8001bca:	f003 0307 	and.w	r3, r3, #7
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	db0b      	blt.n	8001c06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	f003 021f 	and.w	r2, r3, #31
 8001bf4:	4907      	ldr	r1, [pc, #28]	@ (8001c14 <__NVIC_EnableIRQ+0x38>)
 8001bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfa:	095b      	lsrs	r3, r3, #5
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000e100 	.word	0xe000e100

08001c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	6039      	str	r1, [r7, #0]
 8001c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	db0a      	blt.n	8001c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	490c      	ldr	r1, [pc, #48]	@ (8001c64 <__NVIC_SetPriority+0x4c>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	0112      	lsls	r2, r2, #4
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c40:	e00a      	b.n	8001c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4908      	ldr	r1, [pc, #32]	@ (8001c68 <__NVIC_SetPriority+0x50>)
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	3b04      	subs	r3, #4
 8001c50:	0112      	lsls	r2, r2, #4
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	440b      	add	r3, r1
 8001c56:	761a      	strb	r2, [r3, #24]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000e100 	.word	0xe000e100
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	@ 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f1c3 0307 	rsb	r3, r3, #7
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	bf28      	it	cs
 8001c8a:	2304      	movcs	r3, #4
 8001c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3304      	adds	r3, #4
 8001c92:	2b06      	cmp	r3, #6
 8001c94:	d902      	bls.n	8001c9c <NVIC_EncodePriority+0x30>
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3b03      	subs	r3, #3
 8001c9a:	e000      	b.n	8001c9e <NVIC_EncodePriority+0x32>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43da      	mvns	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	401a      	ands	r2, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbe:	43d9      	mvns	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	4313      	orrs	r3, r2
         );
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3724      	adds	r7, #36	@ 0x24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ce4:	d301      	bcc.n	8001cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e00f      	b.n	8001d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cea:	4a0a      	ldr	r2, [pc, #40]	@ (8001d14 <SysTick_Config+0x40>)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cf2:	210f      	movs	r1, #15
 8001cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf8:	f7ff ff8e 	bl	8001c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cfc:	4b05      	ldr	r3, [pc, #20]	@ (8001d14 <SysTick_Config+0x40>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d02:	4b04      	ldr	r3, [pc, #16]	@ (8001d14 <SysTick_Config+0x40>)
 8001d04:	2207      	movs	r2, #7
 8001d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	e000e010 	.word	0xe000e010

08001d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff ff29 	bl	8001b78 <__NVIC_SetPriorityGrouping>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b086      	sub	sp, #24
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	4603      	mov	r3, r0
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
 8001d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d40:	f7ff ff3e 	bl	8001bc0 <__NVIC_GetPriorityGrouping>
 8001d44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	68b9      	ldr	r1, [r7, #8]
 8001d4a:	6978      	ldr	r0, [r7, #20]
 8001d4c:	f7ff ff8e 	bl	8001c6c <NVIC_EncodePriority>
 8001d50:	4602      	mov	r2, r0
 8001d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d56:	4611      	mov	r1, r2
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff5d 	bl	8001c18 <__NVIC_SetPriority>
}
 8001d5e:	bf00      	nop
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff31 	bl	8001bdc <__NVIC_EnableIRQ>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff ffa2 	bl	8001cd4 <SysTick_Config>
 8001d90:	4603      	mov	r3, r0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e014      	b.n	8001dd6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	791b      	ldrb	r3, [r3, #4]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d105      	bne.n	8001dc2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7fe ff6f 	bl	8000ca0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
 8001de6:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e046      	b.n	8001e80 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	795b      	ldrb	r3, [r3, #5]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_DAC_Start+0x20>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e040      	b.n	8001e80 <HAL_DAC_Start+0xa2>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	6819      	ldr	r1, [r3, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	f003 0310 	and.w	r3, r3, #16
 8001e16:	2201      	movs	r2, #1
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10f      	bne.n	8001e48 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8001e32:	2b3c      	cmp	r3, #60	@ 0x3c
 8001e34:	d11d      	bne.n	8001e72 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f042 0201 	orr.w	r2, r2, #1
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	e014      	b.n	8001e72 <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	f003 0310 	and.w	r3, r3, #16
 8001e58:	213c      	movs	r1, #60	@ 0x3c
 8001e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d107      	bne.n	8001e72 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f042 0202 	orr.w	r2, r2, #2
 8001e70:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2201      	movs	r2, #1
 8001e76:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
 8001e98:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e015      	b.n	8001ed4 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d105      	bne.n	8001ec0 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	3308      	adds	r3, #8
 8001ebc:	617b      	str	r3, [r7, #20]
 8001ebe:	e004      	b.n	8001eca <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001ec0:	697a      	ldr	r2, [r7, #20]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	3314      	adds	r3, #20
 8001ec8:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	371c      	adds	r7, #28
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b089      	sub	sp, #36	@ 0x24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	60b9      	str	r1, [r7, #8]
 8001eea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eec:	2300      	movs	r3, #0
 8001eee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <HAL_DAC_ConfigChannel+0x1c>
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e042      	b.n	8001f86 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	795b      	ldrb	r3, [r3, #5]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d101      	bne.n	8001f0c <HAL_DAC_ConfigChannel+0x2c>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e03c      	b.n	8001f86 <HAL_DAC_ConfigChannel+0xa6>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2202      	movs	r2, #2
 8001f16:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f003 0310 	and.w	r3, r3, #16
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6819      	ldr	r1, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	22c0      	movs	r2, #192	@ 0xc0
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	400a      	ands	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001f84:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3724      	adds	r7, #36	@ 0x24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fa0:	f7ff f8bc 	bl	800111c <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e099      	b.n	80020e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0201 	bic.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fd0:	e00f      	b.n	8001ff2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fd2:	f7ff f8a3 	bl	800111c <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b05      	cmp	r3, #5
 8001fde:	d908      	bls.n	8001ff2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2203      	movs	r2, #3
 8001fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e078      	b.n	80020e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1e8      	bne.n	8001fd2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	4b38      	ldr	r3, [pc, #224]	@ (80020ec <HAL_DMA_Init+0x158>)
 800200c:	4013      	ands	r3, r2
 800200e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800201e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800202a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002036:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	4313      	orrs	r3, r2
 8002042:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002048:	2b04      	cmp	r3, #4
 800204a:	d107      	bne.n	800205c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002054:	4313      	orrs	r3, r2
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	4313      	orrs	r3, r2
 800205a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f023 0307 	bic.w	r3, r3, #7
 8002072:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	4313      	orrs	r3, r2
 800207c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002082:	2b04      	cmp	r3, #4
 8002084:	d117      	bne.n	80020b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	4313      	orrs	r3, r2
 800208e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00e      	beq.n	80020b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 fa6f 	bl	800257c <DMA_CheckFifoParam>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d008      	beq.n	80020b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2240      	movs	r2, #64	@ 0x40
 80020a8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80020b2:	2301      	movs	r3, #1
 80020b4:	e016      	b.n	80020e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 fa26 	bl	8002510 <DMA_CalcBaseAndBitshift>
 80020c4:	4603      	mov	r3, r0
 80020c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020cc:	223f      	movs	r2, #63	@ 0x3f
 80020ce:	409a      	lsls	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	f010803f 	.word	0xf010803f

080020f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
 80020fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020fe:	2300      	movs	r3, #0
 8002100:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002106:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800210e:	2b01      	cmp	r3, #1
 8002110:	d101      	bne.n	8002116 <HAL_DMA_Start_IT+0x26>
 8002112:	2302      	movs	r3, #2
 8002114:	e040      	b.n	8002198 <HAL_DMA_Start_IT+0xa8>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b01      	cmp	r3, #1
 8002128:	d12f      	bne.n	800218a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2202      	movs	r2, #2
 800212e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	68b9      	ldr	r1, [r7, #8]
 800213e:	68f8      	ldr	r0, [r7, #12]
 8002140:	f000 f9b8 	bl	80024b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002148:	223f      	movs	r2, #63	@ 0x3f
 800214a:	409a      	lsls	r2, r3
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0216 	orr.w	r2, r2, #22
 800215e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002164:	2b00      	cmp	r3, #0
 8002166:	d007      	beq.n	8002178 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0208 	orr.w	r2, r2, #8
 8002176:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0201 	orr.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	e005      	b.n	8002196 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002192:	2302      	movs	r3, #2
 8002194:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002196:	7dfb      	ldrb	r3, [r7, #23]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021ac:	4b8e      	ldr	r3, [pc, #568]	@ (80023e8 <HAL_DMA_IRQHandler+0x248>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a8e      	ldr	r2, [pc, #568]	@ (80023ec <HAL_DMA_IRQHandler+0x24c>)
 80021b2:	fba2 2303 	umull	r2, r3, r2, r3
 80021b6:	0a9b      	lsrs	r3, r3, #10
 80021b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ca:	2208      	movs	r2, #8
 80021cc:	409a      	lsls	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	4013      	ands	r3, r2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d01a      	beq.n	800220c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d013      	beq.n	800220c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0204 	bic.w	r2, r2, #4
 80021f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f8:	2208      	movs	r2, #8
 80021fa:	409a      	lsls	r2, r3
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002204:	f043 0201 	orr.w	r2, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002210:	2201      	movs	r2, #1
 8002212:	409a      	lsls	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d012      	beq.n	8002242 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00b      	beq.n	8002242 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800222e:	2201      	movs	r2, #1
 8002230:	409a      	lsls	r2, r3
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800223a:	f043 0202 	orr.w	r2, r3, #2
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002246:	2204      	movs	r2, #4
 8002248:	409a      	lsls	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4013      	ands	r3, r2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d012      	beq.n	8002278 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00b      	beq.n	8002278 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002264:	2204      	movs	r2, #4
 8002266:	409a      	lsls	r2, r3
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002270:	f043 0204 	orr.w	r2, r3, #4
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227c:	2210      	movs	r2, #16
 800227e:	409a      	lsls	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4013      	ands	r3, r2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d043      	beq.n	8002310 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	2b00      	cmp	r3, #0
 8002294:	d03c      	beq.n	8002310 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800229a:	2210      	movs	r2, #16
 800229c:	409a      	lsls	r2, r3
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d018      	beq.n	80022e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d108      	bne.n	80022d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d024      	beq.n	8002310 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	4798      	blx	r3
 80022ce:	e01f      	b.n	8002310 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d01b      	beq.n	8002310 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	4798      	blx	r3
 80022e0:	e016      	b.n	8002310 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d107      	bne.n	8002300 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0208 	bic.w	r2, r2, #8
 80022fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002314:	2220      	movs	r2, #32
 8002316:	409a      	lsls	r2, r3
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4013      	ands	r3, r2
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 808f 	beq.w	8002440 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0310 	and.w	r3, r3, #16
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 8087 	beq.w	8002440 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002336:	2220      	movs	r2, #32
 8002338:	409a      	lsls	r2, r3
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b05      	cmp	r3, #5
 8002348:	d136      	bne.n	80023b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0216 	bic.w	r2, r2, #22
 8002358:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695a      	ldr	r2, [r3, #20]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002368:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	2b00      	cmp	r3, #0
 8002370:	d103      	bne.n	800237a <HAL_DMA_IRQHandler+0x1da>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002376:	2b00      	cmp	r3, #0
 8002378:	d007      	beq.n	800238a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0208 	bic.w	r2, r2, #8
 8002388:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800238e:	223f      	movs	r2, #63	@ 0x3f
 8002390:	409a      	lsls	r2, r3
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d07e      	beq.n	80024ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	4798      	blx	r3
        }
        return;
 80023b6:	e079      	b.n	80024ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d01d      	beq.n	8002402 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10d      	bne.n	80023f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d031      	beq.n	8002440 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	4798      	blx	r3
 80023e4:	e02c      	b.n	8002440 <HAL_DMA_IRQHandler+0x2a0>
 80023e6:	bf00      	nop
 80023e8:	2000000c 	.word	0x2000000c
 80023ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d023      	beq.n	8002440 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	4798      	blx	r3
 8002400:	e01e      	b.n	8002440 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10f      	bne.n	8002430 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0210 	bic.w	r2, r2, #16
 800241e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002444:	2b00      	cmp	r3, #0
 8002446:	d032      	beq.n	80024ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b00      	cmp	r3, #0
 8002452:	d022      	beq.n	800249a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2205      	movs	r2, #5
 8002458:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0201 	bic.w	r2, r2, #1
 800246a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	3301      	adds	r3, #1
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	429a      	cmp	r2, r3
 8002476:	d307      	bcc.n	8002488 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f2      	bne.n	800246c <HAL_DMA_IRQHandler+0x2cc>
 8002486:	e000      	b.n	800248a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002488:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d005      	beq.n	80024ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	4798      	blx	r3
 80024aa:	e000      	b.n	80024ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80024ac:	bf00      	nop
    }
  }
}
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
 80024c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b40      	cmp	r3, #64	@ 0x40
 80024e0:	d108      	bne.n	80024f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024f2:	e007      	b.n	8002504 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	60da      	str	r2, [r3, #12]
}
 8002504:	bf00      	nop
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	b2db      	uxtb	r3, r3
 800251e:	3b10      	subs	r3, #16
 8002520:	4a14      	ldr	r2, [pc, #80]	@ (8002574 <DMA_CalcBaseAndBitshift+0x64>)
 8002522:	fba2 2303 	umull	r2, r3, r2, r3
 8002526:	091b      	lsrs	r3, r3, #4
 8002528:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800252a:	4a13      	ldr	r2, [pc, #76]	@ (8002578 <DMA_CalcBaseAndBitshift+0x68>)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4413      	add	r3, r2
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b03      	cmp	r3, #3
 800253c:	d909      	bls.n	8002552 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002546:	f023 0303 	bic.w	r3, r3, #3
 800254a:	1d1a      	adds	r2, r3, #4
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002550:	e007      	b.n	8002562 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800255a:	f023 0303 	bic.w	r3, r3, #3
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002566:	4618      	mov	r0, r3
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	aaaaaaab 	.word	0xaaaaaaab
 8002578:	08003a78 	.word	0x08003a78

0800257c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002584:	2300      	movs	r3, #0
 8002586:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d11f      	bne.n	80025d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2b03      	cmp	r3, #3
 800259a:	d856      	bhi.n	800264a <DMA_CheckFifoParam+0xce>
 800259c:	a201      	add	r2, pc, #4	@ (adr r2, 80025a4 <DMA_CheckFifoParam+0x28>)
 800259e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a2:	bf00      	nop
 80025a4:	080025b5 	.word	0x080025b5
 80025a8:	080025c7 	.word	0x080025c7
 80025ac:	080025b5 	.word	0x080025b5
 80025b0:	0800264b 	.word	0x0800264b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d046      	beq.n	800264e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025c4:	e043      	b.n	800264e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025ce:	d140      	bne.n	8002652 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025d4:	e03d      	b.n	8002652 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025de:	d121      	bne.n	8002624 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d837      	bhi.n	8002656 <DMA_CheckFifoParam+0xda>
 80025e6:	a201      	add	r2, pc, #4	@ (adr r2, 80025ec <DMA_CheckFifoParam+0x70>)
 80025e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ec:	080025fd 	.word	0x080025fd
 80025f0:	08002603 	.word	0x08002603
 80025f4:	080025fd 	.word	0x080025fd
 80025f8:	08002615 	.word	0x08002615
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002600:	e030      	b.n	8002664 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002606:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d025      	beq.n	800265a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002612:	e022      	b.n	800265a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002618:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800261c:	d11f      	bne.n	800265e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002622:	e01c      	b.n	800265e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d903      	bls.n	8002632 <DMA_CheckFifoParam+0xb6>
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2b03      	cmp	r3, #3
 800262e:	d003      	beq.n	8002638 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002630:	e018      	b.n	8002664 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	73fb      	strb	r3, [r7, #15]
      break;
 8002636:	e015      	b.n	8002664 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800263c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00e      	beq.n	8002662 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	73fb      	strb	r3, [r7, #15]
      break;
 8002648:	e00b      	b.n	8002662 <DMA_CheckFifoParam+0xe6>
      break;
 800264a:	bf00      	nop
 800264c:	e00a      	b.n	8002664 <DMA_CheckFifoParam+0xe8>
      break;
 800264e:	bf00      	nop
 8002650:	e008      	b.n	8002664 <DMA_CheckFifoParam+0xe8>
      break;
 8002652:	bf00      	nop
 8002654:	e006      	b.n	8002664 <DMA_CheckFifoParam+0xe8>
      break;
 8002656:	bf00      	nop
 8002658:	e004      	b.n	8002664 <DMA_CheckFifoParam+0xe8>
      break;
 800265a:	bf00      	nop
 800265c:	e002      	b.n	8002664 <DMA_CheckFifoParam+0xe8>
      break;   
 800265e:	bf00      	nop
 8002660:	e000      	b.n	8002664 <DMA_CheckFifoParam+0xe8>
      break;
 8002662:	bf00      	nop
    }
  } 
  
  return status; 
 8002664:	7bfb      	ldrb	r3, [r7, #15]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop

08002674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	@ 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002686:	2300      	movs	r3, #0
 8002688:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
 800268e:	e16b      	b.n	8002968 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002690:	2201      	movs	r2, #1
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	4013      	ands	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	f040 815a 	bne.w	8002962 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d005      	beq.n	80026c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d130      	bne.n	8002728 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	2203      	movs	r2, #3
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026fc:	2201      	movs	r2, #1
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	091b      	lsrs	r3, r3, #4
 8002712:	f003 0201 	and.w	r2, r3, #1
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 0303 	and.w	r3, r3, #3
 8002730:	2b03      	cmp	r3, #3
 8002732:	d017      	beq.n	8002764 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	2203      	movs	r2, #3
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d123      	bne.n	80027b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	08da      	lsrs	r2, r3, #3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3208      	adds	r2, #8
 8002778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800277c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	220f      	movs	r2, #15
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	08da      	lsrs	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3208      	adds	r2, #8
 80027b2:	69b9      	ldr	r1, [r7, #24]
 80027b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	2203      	movs	r2, #3
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 0203 	and.w	r2, r3, #3
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 80b4 	beq.w	8002962 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	4b60      	ldr	r3, [pc, #384]	@ (8002980 <HAL_GPIO_Init+0x30c>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002802:	4a5f      	ldr	r2, [pc, #380]	@ (8002980 <HAL_GPIO_Init+0x30c>)
 8002804:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002808:	6453      	str	r3, [r2, #68]	@ 0x44
 800280a:	4b5d      	ldr	r3, [pc, #372]	@ (8002980 <HAL_GPIO_Init+0x30c>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002816:	4a5b      	ldr	r2, [pc, #364]	@ (8002984 <HAL_GPIO_Init+0x310>)
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	089b      	lsrs	r3, r3, #2
 800281c:	3302      	adds	r3, #2
 800281e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	220f      	movs	r2, #15
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a52      	ldr	r2, [pc, #328]	@ (8002988 <HAL_GPIO_Init+0x314>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d02b      	beq.n	800289a <HAL_GPIO_Init+0x226>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a51      	ldr	r2, [pc, #324]	@ (800298c <HAL_GPIO_Init+0x318>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d025      	beq.n	8002896 <HAL_GPIO_Init+0x222>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a50      	ldr	r2, [pc, #320]	@ (8002990 <HAL_GPIO_Init+0x31c>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d01f      	beq.n	8002892 <HAL_GPIO_Init+0x21e>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a4f      	ldr	r2, [pc, #316]	@ (8002994 <HAL_GPIO_Init+0x320>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d019      	beq.n	800288e <HAL_GPIO_Init+0x21a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a4e      	ldr	r2, [pc, #312]	@ (8002998 <HAL_GPIO_Init+0x324>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d013      	beq.n	800288a <HAL_GPIO_Init+0x216>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a4d      	ldr	r2, [pc, #308]	@ (800299c <HAL_GPIO_Init+0x328>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d00d      	beq.n	8002886 <HAL_GPIO_Init+0x212>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a4c      	ldr	r2, [pc, #304]	@ (80029a0 <HAL_GPIO_Init+0x32c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d007      	beq.n	8002882 <HAL_GPIO_Init+0x20e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a4b      	ldr	r2, [pc, #300]	@ (80029a4 <HAL_GPIO_Init+0x330>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d101      	bne.n	800287e <HAL_GPIO_Init+0x20a>
 800287a:	2307      	movs	r3, #7
 800287c:	e00e      	b.n	800289c <HAL_GPIO_Init+0x228>
 800287e:	2308      	movs	r3, #8
 8002880:	e00c      	b.n	800289c <HAL_GPIO_Init+0x228>
 8002882:	2306      	movs	r3, #6
 8002884:	e00a      	b.n	800289c <HAL_GPIO_Init+0x228>
 8002886:	2305      	movs	r3, #5
 8002888:	e008      	b.n	800289c <HAL_GPIO_Init+0x228>
 800288a:	2304      	movs	r3, #4
 800288c:	e006      	b.n	800289c <HAL_GPIO_Init+0x228>
 800288e:	2303      	movs	r3, #3
 8002890:	e004      	b.n	800289c <HAL_GPIO_Init+0x228>
 8002892:	2302      	movs	r3, #2
 8002894:	e002      	b.n	800289c <HAL_GPIO_Init+0x228>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <HAL_GPIO_Init+0x228>
 800289a:	2300      	movs	r3, #0
 800289c:	69fa      	ldr	r2, [r7, #28]
 800289e:	f002 0203 	and.w	r2, r2, #3
 80028a2:	0092      	lsls	r2, r2, #2
 80028a4:	4093      	lsls	r3, r2
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028ac:	4935      	ldr	r1, [pc, #212]	@ (8002984 <HAL_GPIO_Init+0x310>)
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	089b      	lsrs	r3, r3, #2
 80028b2:	3302      	adds	r3, #2
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ba:	4b3b      	ldr	r3, [pc, #236]	@ (80029a8 <HAL_GPIO_Init+0x334>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028de:	4a32      	ldr	r2, [pc, #200]	@ (80029a8 <HAL_GPIO_Init+0x334>)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028e4:	4b30      	ldr	r3, [pc, #192]	@ (80029a8 <HAL_GPIO_Init+0x334>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002908:	4a27      	ldr	r2, [pc, #156]	@ (80029a8 <HAL_GPIO_Init+0x334>)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800290e:	4b26      	ldr	r3, [pc, #152]	@ (80029a8 <HAL_GPIO_Init+0x334>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002932:	4a1d      	ldr	r2, [pc, #116]	@ (80029a8 <HAL_GPIO_Init+0x334>)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002938:	4b1b      	ldr	r3, [pc, #108]	@ (80029a8 <HAL_GPIO_Init+0x334>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800295c:	4a12      	ldr	r2, [pc, #72]	@ (80029a8 <HAL_GPIO_Init+0x334>)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3301      	adds	r3, #1
 8002966:	61fb      	str	r3, [r7, #28]
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	2b0f      	cmp	r3, #15
 800296c:	f67f ae90 	bls.w	8002690 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	3724      	adds	r7, #36	@ 0x24
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800
 8002984:	40013800 	.word	0x40013800
 8002988:	40020000 	.word	0x40020000
 800298c:	40020400 	.word	0x40020400
 8002990:	40020800 	.word	0x40020800
 8002994:	40020c00 	.word	0x40020c00
 8002998:	40021000 	.word	0x40021000
 800299c:	40021400 	.word	0x40021400
 80029a0:	40021800 	.word	0x40021800
 80029a4:	40021c00 	.word	0x40021c00
 80029a8:	40013c00 	.word	0x40013c00

080029ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e267      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d075      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029ca:	4b88      	ldr	r3, [pc, #544]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 030c 	and.w	r3, r3, #12
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d00c      	beq.n	80029f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029d6:	4b85      	ldr	r3, [pc, #532]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80029de:	2b08      	cmp	r3, #8
 80029e0:	d112      	bne.n	8002a08 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029e2:	4b82      	ldr	r3, [pc, #520]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029ee:	d10b      	bne.n	8002a08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f0:	4b7e      	ldr	r3, [pc, #504]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d05b      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x108>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d157      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e242      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a10:	d106      	bne.n	8002a20 <HAL_RCC_OscConfig+0x74>
 8002a12:	4b76      	ldr	r3, [pc, #472]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a75      	ldr	r2, [pc, #468]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	e01d      	b.n	8002a5c <HAL_RCC_OscConfig+0xb0>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a28:	d10c      	bne.n	8002a44 <HAL_RCC_OscConfig+0x98>
 8002a2a:	4b70      	ldr	r3, [pc, #448]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a6f      	ldr	r2, [pc, #444]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	4b6d      	ldr	r3, [pc, #436]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a6c      	ldr	r2, [pc, #432]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	e00b      	b.n	8002a5c <HAL_RCC_OscConfig+0xb0>
 8002a44:	4b69      	ldr	r3, [pc, #420]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a68      	ldr	r2, [pc, #416]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	4b66      	ldr	r3, [pc, #408]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a65      	ldr	r2, [pc, #404]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d013      	beq.n	8002a8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a64:	f7fe fb5a 	bl	800111c <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a6c:	f7fe fb56 	bl	800111c <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	@ 0x64
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e207      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7e:	4b5b      	ldr	r3, [pc, #364]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0xc0>
 8002a8a:	e014      	b.n	8002ab6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8c:	f7fe fb46 	bl	800111c <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a94:	f7fe fb42 	bl	800111c <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b64      	cmp	r3, #100	@ 0x64
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e1f3      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aa6:	4b51      	ldr	r3, [pc, #324]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0xe8>
 8002ab2:	e000      	b.n	8002ab6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d063      	beq.n	8002b8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ac2:	4b4a      	ldr	r3, [pc, #296]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 030c 	and.w	r3, r3, #12
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00b      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ace:	4b47      	ldr	r3, [pc, #284]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d11c      	bne.n	8002b14 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ada:	4b44      	ldr	r3, [pc, #272]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d116      	bne.n	8002b14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ae6:	4b41      	ldr	r3, [pc, #260]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d005      	beq.n	8002afe <HAL_RCC_OscConfig+0x152>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d001      	beq.n	8002afe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e1c7      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afe:	4b3b      	ldr	r3, [pc, #236]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4937      	ldr	r1, [pc, #220]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b12:	e03a      	b.n	8002b8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d020      	beq.n	8002b5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b1c:	4b34      	ldr	r3, [pc, #208]	@ (8002bf0 <HAL_RCC_OscConfig+0x244>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b22:	f7fe fafb 	bl	800111c <HAL_GetTick>
 8002b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b2a:	f7fe faf7 	bl	800111c <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e1a8      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0f0      	beq.n	8002b2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b48:	4b28      	ldr	r3, [pc, #160]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4925      	ldr	r1, [pc, #148]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	600b      	str	r3, [r1, #0]
 8002b5c:	e015      	b.n	8002b8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b5e:	4b24      	ldr	r3, [pc, #144]	@ (8002bf0 <HAL_RCC_OscConfig+0x244>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b64:	f7fe fada 	bl	800111c <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b6c:	f7fe fad6 	bl	800111c <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e187      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d036      	beq.n	8002c04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d016      	beq.n	8002bcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b9e:	4b15      	ldr	r3, [pc, #84]	@ (8002bf4 <HAL_RCC_OscConfig+0x248>)
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba4:	f7fe faba 	bl	800111c <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bac:	f7fe fab6 	bl	800111c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e167      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8002bec <HAL_RCC_OscConfig+0x240>)
 8002bc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCC_OscConfig+0x200>
 8002bca:	e01b      	b.n	8002c04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bcc:	4b09      	ldr	r3, [pc, #36]	@ (8002bf4 <HAL_RCC_OscConfig+0x248>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd2:	f7fe faa3 	bl	800111c <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bd8:	e00e      	b.n	8002bf8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bda:	f7fe fa9f 	bl	800111c <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d907      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e150      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	42470000 	.word	0x42470000
 8002bf4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf8:	4b88      	ldr	r3, [pc, #544]	@ (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002bfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1ea      	bne.n	8002bda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 8097 	beq.w	8002d40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c12:	2300      	movs	r3, #0
 8002c14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c16:	4b81      	ldr	r3, [pc, #516]	@ (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d10f      	bne.n	8002c42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	4b7d      	ldr	r3, [pc, #500]	@ (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2a:	4a7c      	ldr	r2, [pc, #496]	@ (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c32:	4b7a      	ldr	r3, [pc, #488]	@ (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c3a:	60bb      	str	r3, [r7, #8]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c42:	4b77      	ldr	r3, [pc, #476]	@ (8002e20 <HAL_RCC_OscConfig+0x474>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d118      	bne.n	8002c80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c4e:	4b74      	ldr	r3, [pc, #464]	@ (8002e20 <HAL_RCC_OscConfig+0x474>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a73      	ldr	r2, [pc, #460]	@ (8002e20 <HAL_RCC_OscConfig+0x474>)
 8002c54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c5a:	f7fe fa5f 	bl	800111c <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c62:	f7fe fa5b 	bl	800111c <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e10c      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c74:	4b6a      	ldr	r3, [pc, #424]	@ (8002e20 <HAL_RCC_OscConfig+0x474>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0f0      	beq.n	8002c62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d106      	bne.n	8002c96 <HAL_RCC_OscConfig+0x2ea>
 8002c88:	4b64      	ldr	r3, [pc, #400]	@ (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8c:	4a63      	ldr	r2, [pc, #396]	@ (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c94:	e01c      	b.n	8002cd0 <HAL_RCC_OscConfig+0x324>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b05      	cmp	r3, #5
 8002c9c:	d10c      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x30c>
 8002c9e:	4b5f      	ldr	r3, [pc, #380]	@ (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca2:	4a5e      	ldr	r2, [pc, #376]	@ (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002ca4:	f043 0304 	orr.w	r3, r3, #4
 8002ca8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002caa:	4b5c      	ldr	r3, [pc, #368]	@ (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cae:	4a5b      	ldr	r2, [pc, #364]	@ (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cb6:	e00b      	b.n	8002cd0 <HAL_RCC_OscConfig+0x324>
 8002cb8:	4b58      	ldr	r3, [pc, #352]	@ (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cbc:	4a57      	ldr	r2, [pc, #348]	@ (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002cbe:	f023 0301 	bic.w	r3, r3, #1
 8002cc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cc4:	4b55      	ldr	r3, [pc, #340]	@ (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc8:	4a54      	ldr	r2, [pc, #336]	@ (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002cca:	f023 0304 	bic.w	r3, r3, #4
 8002cce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d015      	beq.n	8002d04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd8:	f7fe fa20 	bl	800111c <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cde:	e00a      	b.n	8002cf6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce0:	f7fe fa1c 	bl	800111c <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e0cb      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf6:	4b49      	ldr	r3, [pc, #292]	@ (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0ee      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x334>
 8002d02:	e014      	b.n	8002d2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d04:	f7fe fa0a 	bl	800111c <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d0a:	e00a      	b.n	8002d22 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0c:	f7fe fa06 	bl	800111c <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e0b5      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d22:	4b3e      	ldr	r3, [pc, #248]	@ (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1ee      	bne.n	8002d0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d2e:	7dfb      	ldrb	r3, [r7, #23]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d105      	bne.n	8002d40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d34:	4b39      	ldr	r3, [pc, #228]	@ (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d38:	4a38      	ldr	r2, [pc, #224]	@ (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002d3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d3e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 80a1 	beq.w	8002e8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d4a:	4b34      	ldr	r3, [pc, #208]	@ (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d05c      	beq.n	8002e10 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d141      	bne.n	8002de2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d5e:	4b31      	ldr	r3, [pc, #196]	@ (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7fe f9da 	bl	800111c <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d6c:	f7fe f9d6 	bl	800111c <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e087      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7e:	4b27      	ldr	r3, [pc, #156]	@ (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69da      	ldr	r2, [r3, #28]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d98:	019b      	lsls	r3, r3, #6
 8002d9a:	431a      	orrs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da0:	085b      	lsrs	r3, r3, #1
 8002da2:	3b01      	subs	r3, #1
 8002da4:	041b      	lsls	r3, r3, #16
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dac:	061b      	lsls	r3, r3, #24
 8002dae:	491b      	ldr	r1, [pc, #108]	@ (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dba:	f7fe f9af 	bl	800111c <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc2:	f7fe f9ab 	bl	800111c <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e05c      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd4:	4b11      	ldr	r3, [pc, #68]	@ (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x416>
 8002de0:	e054      	b.n	8002e8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de2:	4b10      	ldr	r3, [pc, #64]	@ (8002e24 <HAL_RCC_OscConfig+0x478>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de8:	f7fe f998 	bl	800111c <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df0:	f7fe f994 	bl	800111c <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e045      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e02:	4b06      	ldr	r3, [pc, #24]	@ (8002e1c <HAL_RCC_OscConfig+0x470>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f0      	bne.n	8002df0 <HAL_RCC_OscConfig+0x444>
 8002e0e:	e03d      	b.n	8002e8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d107      	bne.n	8002e28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e038      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	40007000 	.word	0x40007000
 8002e24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e28:	4b1b      	ldr	r3, [pc, #108]	@ (8002e98 <HAL_RCC_OscConfig+0x4ec>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d028      	beq.n	8002e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d121      	bne.n	8002e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d11a      	bne.n	8002e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e58:	4013      	ands	r3, r2
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d111      	bne.n	8002e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6e:	085b      	lsrs	r3, r3, #1
 8002e70:	3b01      	subs	r3, #1
 8002e72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d107      	bne.n	8002e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d001      	beq.n	8002e8c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e000      	b.n	8002e8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40023800 	.word	0x40023800

08002e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0cc      	b.n	800304a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002eb0:	4b68      	ldr	r3, [pc, #416]	@ (8003054 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d90c      	bls.n	8002ed8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ebe:	4b65      	ldr	r3, [pc, #404]	@ (8003054 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec6:	4b63      	ldr	r3, [pc, #396]	@ (8003054 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d001      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0b8      	b.n	800304a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d020      	beq.n	8002f26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ef0:	4b59      	ldr	r3, [pc, #356]	@ (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	4a58      	ldr	r2, [pc, #352]	@ (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002efa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0308 	and.w	r3, r3, #8
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f08:	4b53      	ldr	r3, [pc, #332]	@ (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	4a52      	ldr	r2, [pc, #328]	@ (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f14:	4b50      	ldr	r3, [pc, #320]	@ (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	494d      	ldr	r1, [pc, #308]	@ (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d044      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d107      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3a:	4b47      	ldr	r3, [pc, #284]	@ (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d119      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e07f      	b.n	800304a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d003      	beq.n	8002f5a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f56:	2b03      	cmp	r3, #3
 8002f58:	d107      	bne.n	8002f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f5a:	4b3f      	ldr	r3, [pc, #252]	@ (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d109      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e06f      	b.n	800304a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f6a:	4b3b      	ldr	r3, [pc, #236]	@ (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e067      	b.n	800304a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f7a:	4b37      	ldr	r3, [pc, #220]	@ (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f023 0203 	bic.w	r2, r3, #3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	4934      	ldr	r1, [pc, #208]	@ (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f8c:	f7fe f8c6 	bl	800111c <HAL_GetTick>
 8002f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f92:	e00a      	b.n	8002faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f94:	f7fe f8c2 	bl	800111c <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e04f      	b.n	800304a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002faa:	4b2b      	ldr	r3, [pc, #172]	@ (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 020c 	and.w	r2, r3, #12
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d1eb      	bne.n	8002f94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fbc:	4b25      	ldr	r3, [pc, #148]	@ (8003054 <HAL_RCC_ClockConfig+0x1b8>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d20c      	bcs.n	8002fe4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fca:	4b22      	ldr	r3, [pc, #136]	@ (8003054 <HAL_RCC_ClockConfig+0x1b8>)
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd2:	4b20      	ldr	r3, [pc, #128]	@ (8003054 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d001      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e032      	b.n	800304a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d008      	beq.n	8003002 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ff0:	4b19      	ldr	r3, [pc, #100]	@ (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	4916      	ldr	r1, [pc, #88]	@ (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d009      	beq.n	8003022 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800300e:	4b12      	ldr	r3, [pc, #72]	@ (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	490e      	ldr	r1, [pc, #56]	@ (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	4313      	orrs	r3, r2
 8003020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003022:	f000 f821 	bl	8003068 <HAL_RCC_GetSysClockFreq>
 8003026:	4602      	mov	r2, r0
 8003028:	4b0b      	ldr	r3, [pc, #44]	@ (8003058 <HAL_RCC_ClockConfig+0x1bc>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	091b      	lsrs	r3, r3, #4
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	490a      	ldr	r1, [pc, #40]	@ (800305c <HAL_RCC_ClockConfig+0x1c0>)
 8003034:	5ccb      	ldrb	r3, [r1, r3]
 8003036:	fa22 f303 	lsr.w	r3, r2, r3
 800303a:	4a09      	ldr	r2, [pc, #36]	@ (8003060 <HAL_RCC_ClockConfig+0x1c4>)
 800303c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800303e:	4b09      	ldr	r3, [pc, #36]	@ (8003064 <HAL_RCC_ClockConfig+0x1c8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f7fe f826 	bl	8001094 <HAL_InitTick>

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3710      	adds	r7, #16
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	40023c00 	.word	0x40023c00
 8003058:	40023800 	.word	0x40023800
 800305c:	08003a68 	.word	0x08003a68
 8003060:	2000000c 	.word	0x2000000c
 8003064:	20000010 	.word	0x20000010

08003068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800306c:	b094      	sub	sp, #80	@ 0x50
 800306e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003080:	4b79      	ldr	r3, [pc, #484]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x200>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f003 030c 	and.w	r3, r3, #12
 8003088:	2b08      	cmp	r3, #8
 800308a:	d00d      	beq.n	80030a8 <HAL_RCC_GetSysClockFreq+0x40>
 800308c:	2b08      	cmp	r3, #8
 800308e:	f200 80e1 	bhi.w	8003254 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <HAL_RCC_GetSysClockFreq+0x34>
 8003096:	2b04      	cmp	r3, #4
 8003098:	d003      	beq.n	80030a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800309a:	e0db      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800309c:	4b73      	ldr	r3, [pc, #460]	@ (800326c <HAL_RCC_GetSysClockFreq+0x204>)
 800309e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030a0:	e0db      	b.n	800325a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030a2:	4b73      	ldr	r3, [pc, #460]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x208>)
 80030a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80030a6:	e0d8      	b.n	800325a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030a8:	4b6f      	ldr	r3, [pc, #444]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x200>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030b2:	4b6d      	ldr	r3, [pc, #436]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x200>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d063      	beq.n	8003186 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030be:	4b6a      	ldr	r3, [pc, #424]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x200>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	099b      	lsrs	r3, r3, #6
 80030c4:	2200      	movs	r2, #0
 80030c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80030ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80030d2:	2300      	movs	r3, #0
 80030d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80030d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80030da:	4622      	mov	r2, r4
 80030dc:	462b      	mov	r3, r5
 80030de:	f04f 0000 	mov.w	r0, #0
 80030e2:	f04f 0100 	mov.w	r1, #0
 80030e6:	0159      	lsls	r1, r3, #5
 80030e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ec:	0150      	lsls	r0, r2, #5
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4621      	mov	r1, r4
 80030f4:	1a51      	subs	r1, r2, r1
 80030f6:	6139      	str	r1, [r7, #16]
 80030f8:	4629      	mov	r1, r5
 80030fa:	eb63 0301 	sbc.w	r3, r3, r1
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800310c:	4659      	mov	r1, fp
 800310e:	018b      	lsls	r3, r1, #6
 8003110:	4651      	mov	r1, sl
 8003112:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003116:	4651      	mov	r1, sl
 8003118:	018a      	lsls	r2, r1, #6
 800311a:	4651      	mov	r1, sl
 800311c:	ebb2 0801 	subs.w	r8, r2, r1
 8003120:	4659      	mov	r1, fp
 8003122:	eb63 0901 	sbc.w	r9, r3, r1
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	f04f 0300 	mov.w	r3, #0
 800312e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003132:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003136:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800313a:	4690      	mov	r8, r2
 800313c:	4699      	mov	r9, r3
 800313e:	4623      	mov	r3, r4
 8003140:	eb18 0303 	adds.w	r3, r8, r3
 8003144:	60bb      	str	r3, [r7, #8]
 8003146:	462b      	mov	r3, r5
 8003148:	eb49 0303 	adc.w	r3, r9, r3
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	f04f 0200 	mov.w	r2, #0
 8003152:	f04f 0300 	mov.w	r3, #0
 8003156:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800315a:	4629      	mov	r1, r5
 800315c:	024b      	lsls	r3, r1, #9
 800315e:	4621      	mov	r1, r4
 8003160:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003164:	4621      	mov	r1, r4
 8003166:	024a      	lsls	r2, r1, #9
 8003168:	4610      	mov	r0, r2
 800316a:	4619      	mov	r1, r3
 800316c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800316e:	2200      	movs	r2, #0
 8003170:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003172:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003174:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003178:	f7fd f826 	bl	80001c8 <__aeabi_uldivmod>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4613      	mov	r3, r2
 8003182:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003184:	e058      	b.n	8003238 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003186:	4b38      	ldr	r3, [pc, #224]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x200>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	099b      	lsrs	r3, r3, #6
 800318c:	2200      	movs	r2, #0
 800318e:	4618      	mov	r0, r3
 8003190:	4611      	mov	r1, r2
 8003192:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003196:	623b      	str	r3, [r7, #32]
 8003198:	2300      	movs	r3, #0
 800319a:	627b      	str	r3, [r7, #36]	@ 0x24
 800319c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031a0:	4642      	mov	r2, r8
 80031a2:	464b      	mov	r3, r9
 80031a4:	f04f 0000 	mov.w	r0, #0
 80031a8:	f04f 0100 	mov.w	r1, #0
 80031ac:	0159      	lsls	r1, r3, #5
 80031ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031b2:	0150      	lsls	r0, r2, #5
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4641      	mov	r1, r8
 80031ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80031be:	4649      	mov	r1, r9
 80031c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031d8:	ebb2 040a 	subs.w	r4, r2, sl
 80031dc:	eb63 050b 	sbc.w	r5, r3, fp
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	00eb      	lsls	r3, r5, #3
 80031ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031ee:	00e2      	lsls	r2, r4, #3
 80031f0:	4614      	mov	r4, r2
 80031f2:	461d      	mov	r5, r3
 80031f4:	4643      	mov	r3, r8
 80031f6:	18e3      	adds	r3, r4, r3
 80031f8:	603b      	str	r3, [r7, #0]
 80031fa:	464b      	mov	r3, r9
 80031fc:	eb45 0303 	adc.w	r3, r5, r3
 8003200:	607b      	str	r3, [r7, #4]
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800320e:	4629      	mov	r1, r5
 8003210:	028b      	lsls	r3, r1, #10
 8003212:	4621      	mov	r1, r4
 8003214:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003218:	4621      	mov	r1, r4
 800321a:	028a      	lsls	r2, r1, #10
 800321c:	4610      	mov	r0, r2
 800321e:	4619      	mov	r1, r3
 8003220:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003222:	2200      	movs	r2, #0
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	61fa      	str	r2, [r7, #28]
 8003228:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800322c:	f7fc ffcc 	bl	80001c8 <__aeabi_uldivmod>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4613      	mov	r3, r2
 8003236:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003238:	4b0b      	ldr	r3, [pc, #44]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x200>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	0c1b      	lsrs	r3, r3, #16
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	3301      	adds	r3, #1
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003248:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800324a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800324c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003250:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003252:	e002      	b.n	800325a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003254:	4b05      	ldr	r3, [pc, #20]	@ (800326c <HAL_RCC_GetSysClockFreq+0x204>)
 8003256:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003258:	bf00      	nop
    }
  }
  return sysclockfreq;
 800325a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800325c:	4618      	mov	r0, r3
 800325e:	3750      	adds	r7, #80	@ 0x50
 8003260:	46bd      	mov	sp, r7
 8003262:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003266:	bf00      	nop
 8003268:	40023800 	.word	0x40023800
 800326c:	00f42400 	.word	0x00f42400
 8003270:	007a1200 	.word	0x007a1200

08003274 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e041      	b.n	800330a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fd fd7a 	bl	8000d94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3304      	adds	r3, #4
 80032b0:	4619      	mov	r1, r3
 80032b2:	4610      	mov	r0, r2
 80032b4:	f000 f95e 	bl	8003574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b01      	cmp	r3, #1
 8003326:	d001      	beq.n	800332c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e046      	b.n	80033ba <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a23      	ldr	r2, [pc, #140]	@ (80033c8 <HAL_TIM_Base_Start+0xb4>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d022      	beq.n	8003384 <HAL_TIM_Base_Start+0x70>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003346:	d01d      	beq.n	8003384 <HAL_TIM_Base_Start+0x70>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1f      	ldr	r2, [pc, #124]	@ (80033cc <HAL_TIM_Base_Start+0xb8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d018      	beq.n	8003384 <HAL_TIM_Base_Start+0x70>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1e      	ldr	r2, [pc, #120]	@ (80033d0 <HAL_TIM_Base_Start+0xbc>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d013      	beq.n	8003384 <HAL_TIM_Base_Start+0x70>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1c      	ldr	r2, [pc, #112]	@ (80033d4 <HAL_TIM_Base_Start+0xc0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00e      	beq.n	8003384 <HAL_TIM_Base_Start+0x70>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a1b      	ldr	r2, [pc, #108]	@ (80033d8 <HAL_TIM_Base_Start+0xc4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d009      	beq.n	8003384 <HAL_TIM_Base_Start+0x70>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a19      	ldr	r2, [pc, #100]	@ (80033dc <HAL_TIM_Base_Start+0xc8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d004      	beq.n	8003384 <HAL_TIM_Base_Start+0x70>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a18      	ldr	r2, [pc, #96]	@ (80033e0 <HAL_TIM_Base_Start+0xcc>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d111      	bne.n	80033a8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2b06      	cmp	r3, #6
 8003394:	d010      	beq.n	80033b8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0201 	orr.w	r2, r2, #1
 80033a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a6:	e007      	b.n	80033b8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0201 	orr.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	40010000 	.word	0x40010000
 80033cc:	40000400 	.word	0x40000400
 80033d0:	40000800 	.word	0x40000800
 80033d4:	40000c00 	.word	0x40000c00
 80033d8:	40010400 	.word	0x40010400
 80033dc:	40014000 	.word	0x40014000
 80033e0:	40001800 	.word	0x40001800

080033e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_TIM_ConfigClockSource+0x1c>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e0b4      	b.n	800356a <HAL_TIM_ConfigClockSource+0x186>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800341e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003426:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003438:	d03e      	beq.n	80034b8 <HAL_TIM_ConfigClockSource+0xd4>
 800343a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800343e:	f200 8087 	bhi.w	8003550 <HAL_TIM_ConfigClockSource+0x16c>
 8003442:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003446:	f000 8086 	beq.w	8003556 <HAL_TIM_ConfigClockSource+0x172>
 800344a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800344e:	d87f      	bhi.n	8003550 <HAL_TIM_ConfigClockSource+0x16c>
 8003450:	2b70      	cmp	r3, #112	@ 0x70
 8003452:	d01a      	beq.n	800348a <HAL_TIM_ConfigClockSource+0xa6>
 8003454:	2b70      	cmp	r3, #112	@ 0x70
 8003456:	d87b      	bhi.n	8003550 <HAL_TIM_ConfigClockSource+0x16c>
 8003458:	2b60      	cmp	r3, #96	@ 0x60
 800345a:	d050      	beq.n	80034fe <HAL_TIM_ConfigClockSource+0x11a>
 800345c:	2b60      	cmp	r3, #96	@ 0x60
 800345e:	d877      	bhi.n	8003550 <HAL_TIM_ConfigClockSource+0x16c>
 8003460:	2b50      	cmp	r3, #80	@ 0x50
 8003462:	d03c      	beq.n	80034de <HAL_TIM_ConfigClockSource+0xfa>
 8003464:	2b50      	cmp	r3, #80	@ 0x50
 8003466:	d873      	bhi.n	8003550 <HAL_TIM_ConfigClockSource+0x16c>
 8003468:	2b40      	cmp	r3, #64	@ 0x40
 800346a:	d058      	beq.n	800351e <HAL_TIM_ConfigClockSource+0x13a>
 800346c:	2b40      	cmp	r3, #64	@ 0x40
 800346e:	d86f      	bhi.n	8003550 <HAL_TIM_ConfigClockSource+0x16c>
 8003470:	2b30      	cmp	r3, #48	@ 0x30
 8003472:	d064      	beq.n	800353e <HAL_TIM_ConfigClockSource+0x15a>
 8003474:	2b30      	cmp	r3, #48	@ 0x30
 8003476:	d86b      	bhi.n	8003550 <HAL_TIM_ConfigClockSource+0x16c>
 8003478:	2b20      	cmp	r3, #32
 800347a:	d060      	beq.n	800353e <HAL_TIM_ConfigClockSource+0x15a>
 800347c:	2b20      	cmp	r3, #32
 800347e:	d867      	bhi.n	8003550 <HAL_TIM_ConfigClockSource+0x16c>
 8003480:	2b00      	cmp	r3, #0
 8003482:	d05c      	beq.n	800353e <HAL_TIM_ConfigClockSource+0x15a>
 8003484:	2b10      	cmp	r3, #16
 8003486:	d05a      	beq.n	800353e <HAL_TIM_ConfigClockSource+0x15a>
 8003488:	e062      	b.n	8003550 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800349a:	f000 f991 	bl	80037c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80034ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	609a      	str	r2, [r3, #8]
      break;
 80034b6:	e04f      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034c8:	f000 f97a 	bl	80037c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034da:	609a      	str	r2, [r3, #8]
      break;
 80034dc:	e03c      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ea:	461a      	mov	r2, r3
 80034ec:	f000 f8ee 	bl	80036cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2150      	movs	r1, #80	@ 0x50
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 f947 	bl	800378a <TIM_ITRx_SetConfig>
      break;
 80034fc:	e02c      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800350a:	461a      	mov	r2, r3
 800350c:	f000 f90d 	bl	800372a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2160      	movs	r1, #96	@ 0x60
 8003516:	4618      	mov	r0, r3
 8003518:	f000 f937 	bl	800378a <TIM_ITRx_SetConfig>
      break;
 800351c:	e01c      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800352a:	461a      	mov	r2, r3
 800352c:	f000 f8ce 	bl	80036cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2140      	movs	r1, #64	@ 0x40
 8003536:	4618      	mov	r0, r3
 8003538:	f000 f927 	bl	800378a <TIM_ITRx_SetConfig>
      break;
 800353c:	e00c      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4619      	mov	r1, r3
 8003548:	4610      	mov	r0, r2
 800354a:	f000 f91e 	bl	800378a <TIM_ITRx_SetConfig>
      break;
 800354e:	e003      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	73fb      	strb	r3, [r7, #15]
      break;
 8003554:	e000      	b.n	8003558 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003556:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003568:	7bfb      	ldrb	r3, [r7, #15]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a46      	ldr	r2, [pc, #280]	@ (80036a0 <TIM_Base_SetConfig+0x12c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d013      	beq.n	80035b4 <TIM_Base_SetConfig+0x40>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003592:	d00f      	beq.n	80035b4 <TIM_Base_SetConfig+0x40>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a43      	ldr	r2, [pc, #268]	@ (80036a4 <TIM_Base_SetConfig+0x130>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00b      	beq.n	80035b4 <TIM_Base_SetConfig+0x40>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a42      	ldr	r2, [pc, #264]	@ (80036a8 <TIM_Base_SetConfig+0x134>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d007      	beq.n	80035b4 <TIM_Base_SetConfig+0x40>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a41      	ldr	r2, [pc, #260]	@ (80036ac <TIM_Base_SetConfig+0x138>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d003      	beq.n	80035b4 <TIM_Base_SetConfig+0x40>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a40      	ldr	r2, [pc, #256]	@ (80036b0 <TIM_Base_SetConfig+0x13c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d108      	bne.n	80035c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a35      	ldr	r2, [pc, #212]	@ (80036a0 <TIM_Base_SetConfig+0x12c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d02b      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035d4:	d027      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a32      	ldr	r2, [pc, #200]	@ (80036a4 <TIM_Base_SetConfig+0x130>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d023      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a31      	ldr	r2, [pc, #196]	@ (80036a8 <TIM_Base_SetConfig+0x134>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d01f      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a30      	ldr	r2, [pc, #192]	@ (80036ac <TIM_Base_SetConfig+0x138>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d01b      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a2f      	ldr	r2, [pc, #188]	@ (80036b0 <TIM_Base_SetConfig+0x13c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d017      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a2e      	ldr	r2, [pc, #184]	@ (80036b4 <TIM_Base_SetConfig+0x140>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d013      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a2d      	ldr	r2, [pc, #180]	@ (80036b8 <TIM_Base_SetConfig+0x144>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00f      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a2c      	ldr	r2, [pc, #176]	@ (80036bc <TIM_Base_SetConfig+0x148>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d00b      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a2b      	ldr	r2, [pc, #172]	@ (80036c0 <TIM_Base_SetConfig+0x14c>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d007      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a2a      	ldr	r2, [pc, #168]	@ (80036c4 <TIM_Base_SetConfig+0x150>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d003      	beq.n	8003626 <TIM_Base_SetConfig+0xb2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a29      	ldr	r2, [pc, #164]	@ (80036c8 <TIM_Base_SetConfig+0x154>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d108      	bne.n	8003638 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800362c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	4313      	orrs	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	4313      	orrs	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a10      	ldr	r2, [pc, #64]	@ (80036a0 <TIM_Base_SetConfig+0x12c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d003      	beq.n	800366c <TIM_Base_SetConfig+0xf8>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a12      	ldr	r2, [pc, #72]	@ (80036b0 <TIM_Base_SetConfig+0x13c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d103      	bne.n	8003674 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b01      	cmp	r3, #1
 8003684:	d105      	bne.n	8003692 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f023 0201 	bic.w	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	611a      	str	r2, [r3, #16]
  }
}
 8003692:	bf00      	nop
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40010000 	.word	0x40010000
 80036a4:	40000400 	.word	0x40000400
 80036a8:	40000800 	.word	0x40000800
 80036ac:	40000c00 	.word	0x40000c00
 80036b0:	40010400 	.word	0x40010400
 80036b4:	40014000 	.word	0x40014000
 80036b8:	40014400 	.word	0x40014400
 80036bc:	40014800 	.word	0x40014800
 80036c0:	40001800 	.word	0x40001800
 80036c4:	40001c00 	.word	0x40001c00
 80036c8:	40002000 	.word	0x40002000

080036cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	f023 0201 	bic.w	r2, r3, #1
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	4313      	orrs	r3, r2
 8003700:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f023 030a 	bic.w	r3, r3, #10
 8003708:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4313      	orrs	r3, r2
 8003710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	621a      	str	r2, [r3, #32]
}
 800371e:	bf00      	nop
 8003720:	371c      	adds	r7, #28
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800372a:	b480      	push	{r7}
 800372c:	b087      	sub	sp, #28
 800372e:	af00      	add	r7, sp, #0
 8003730:	60f8      	str	r0, [r7, #12]
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	f023 0210 	bic.w	r2, r3, #16
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003754:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	031b      	lsls	r3, r3, #12
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4313      	orrs	r3, r2
 800375e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003766:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	621a      	str	r2, [r3, #32]
}
 800377e:	bf00      	nop
 8003780:	371c      	adds	r7, #28
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800378a:	b480      	push	{r7}
 800378c:	b085      	sub	sp, #20
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f043 0307 	orr.w	r3, r3, #7
 80037ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	609a      	str	r2, [r3, #8]
}
 80037b4:	bf00      	nop
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	021a      	lsls	r2, r3, #8
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	431a      	orrs	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	609a      	str	r2, [r3, #8]
}
 80037f4:	bf00      	nop
 80037f6:	371c      	adds	r7, #28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003814:	2302      	movs	r3, #2
 8003816:	e05a      	b.n	80038ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800383e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a21      	ldr	r2, [pc, #132]	@ (80038dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d022      	beq.n	80038a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003864:	d01d      	beq.n	80038a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a1d      	ldr	r2, [pc, #116]	@ (80038e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d018      	beq.n	80038a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a1b      	ldr	r2, [pc, #108]	@ (80038e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d013      	beq.n	80038a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a1a      	ldr	r2, [pc, #104]	@ (80038e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d00e      	beq.n	80038a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a18      	ldr	r2, [pc, #96]	@ (80038ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d009      	beq.n	80038a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a17      	ldr	r2, [pc, #92]	@ (80038f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d004      	beq.n	80038a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a15      	ldr	r2, [pc, #84]	@ (80038f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d10c      	bne.n	80038bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40010000 	.word	0x40010000
 80038e0:	40000400 	.word	0x40000400
 80038e4:	40000800 	.word	0x40000800
 80038e8:	40000c00 	.word	0x40000c00
 80038ec:	40010400 	.word	0x40010400
 80038f0:	40014000 	.word	0x40014000
 80038f4:	40001800 	.word	0x40001800

080038f8 <memset>:
 80038f8:	4402      	add	r2, r0
 80038fa:	4603      	mov	r3, r0
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d100      	bne.n	8003902 <memset+0xa>
 8003900:	4770      	bx	lr
 8003902:	f803 1b01 	strb.w	r1, [r3], #1
 8003906:	e7f9      	b.n	80038fc <memset+0x4>

08003908 <__libc_init_array>:
 8003908:	b570      	push	{r4, r5, r6, lr}
 800390a:	4d0d      	ldr	r5, [pc, #52]	@ (8003940 <__libc_init_array+0x38>)
 800390c:	4c0d      	ldr	r4, [pc, #52]	@ (8003944 <__libc_init_array+0x3c>)
 800390e:	1b64      	subs	r4, r4, r5
 8003910:	10a4      	asrs	r4, r4, #2
 8003912:	2600      	movs	r6, #0
 8003914:	42a6      	cmp	r6, r4
 8003916:	d109      	bne.n	800392c <__libc_init_array+0x24>
 8003918:	4d0b      	ldr	r5, [pc, #44]	@ (8003948 <__libc_init_array+0x40>)
 800391a:	4c0c      	ldr	r4, [pc, #48]	@ (800394c <__libc_init_array+0x44>)
 800391c:	f000 f818 	bl	8003950 <_init>
 8003920:	1b64      	subs	r4, r4, r5
 8003922:	10a4      	asrs	r4, r4, #2
 8003924:	2600      	movs	r6, #0
 8003926:	42a6      	cmp	r6, r4
 8003928:	d105      	bne.n	8003936 <__libc_init_array+0x2e>
 800392a:	bd70      	pop	{r4, r5, r6, pc}
 800392c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003930:	4798      	blx	r3
 8003932:	3601      	adds	r6, #1
 8003934:	e7ee      	b.n	8003914 <__libc_init_array+0xc>
 8003936:	f855 3b04 	ldr.w	r3, [r5], #4
 800393a:	4798      	blx	r3
 800393c:	3601      	adds	r6, #1
 800393e:	e7f2      	b.n	8003926 <__libc_init_array+0x1e>
 8003940:	08003a88 	.word	0x08003a88
 8003944:	08003a88 	.word	0x08003a88
 8003948:	08003a88 	.word	0x08003a88
 800394c:	08003a8c 	.word	0x08003a8c

08003950 <_init>:
 8003950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003952:	bf00      	nop
 8003954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003956:	bc08      	pop	{r3}
 8003958:	469e      	mov	lr, r3
 800395a:	4770      	bx	lr

0800395c <_fini>:
 800395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395e:	bf00      	nop
 8003960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003962:	bc08      	pop	{r3}
 8003964:	469e      	mov	lr, r3
 8003966:	4770      	bx	lr
